<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="UnifiedUserActionsTrackerManager">
    <option name="actions">
      <list>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\res\navigation\nav_graph.xml" />
          <option name="timestamp" value="1743339227933" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\res\navigation\nav_graph.xml&#10;+++ b/app\src\main\res\navigation\nav_graph.xml&#10;@@ -47,7 +47,8 @@&#10; &#13;&#10;     &lt;fragment&#13;&#10;         android:id=&quot;@+id/labelNotesFragment&quot;&#13;&#10;-        android:name=&quot;com.xr.notes.ui.LabelsFragment&quot;&#13;&#10;+        android:name=&quot;com.xr.notes.ui.LabelNotesFragment&quot;&#13;&#10;+        android:label=&quot;{labelName}&quot;&#13;&#10;         tools:layout=&quot;@layout/fragment_notes&quot;&gt;&#13;&#10;         &lt;argument&#13;&#10;             android:name=&quot;labelId&quot;&#13;&#10;&#10;" />
          <option name="timestamp" value="1743339619274" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\NotesViewModel.kt" />
          <option name="timestamp" value="1743339619274" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\NotesViewModel.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\NotesViewModel.kt&#10;@@ -1,7 +1,5 @@&#10; package com.xr.notes.ui&#13;&#10; &#13;&#10;-// File: app/src/main/java/com/example/notesapp/ui/notes/NotesViewModel.kt&#13;&#10;-&#13;&#10; import androidx.lifecycle.LiveData&#13;&#10; import androidx.lifecycle.MediatorLiveData&#13;&#10; import androidx.lifecycle.MutableLiveData&#13;&#10;@@ -27,6 +25,7 @@&#10; &#13;&#10;     private val _searchQuery = MutableLiveData&lt;String&gt;(&quot;&quot;)&#13;&#10;     private val notesSource = MediatorLiveData&lt;List&lt;Note&gt;&gt;()&#13;&#10;+    private val _currentNotes = MutableLiveData&lt;List&lt;Note&gt;&gt;(listOf())&#13;&#10; &#13;&#10;     val notes: LiveData&lt;List&lt;Note&gt;&gt; = notesSource&#13;&#10; &#13;&#10;@@ -49,6 +48,7 @@&#10;         }&#13;&#10; &#13;&#10;         notesSource.addSource(source) { notesList -&gt;&#13;&#10;+            _currentNotes.value = notesList&#13;&#10;             val query = _searchQuery.value ?: &quot;&quot;&#13;&#10;             if (query.isEmpty()) {&#13;&#10;                 notesSource.value = notesList&#13;&#10;@@ -64,8 +64,10 @@&#10;         _searchQuery.value = query&#13;&#10; &#13;&#10;         // Trigger filtering of current list&#13;&#10;-        notesSource.value = notesSource.value?.filter { note -&gt;&#13;&#10;-            note.content.contains(query, ignoreCase = true)&#13;&#10;+        _currentNotes.value?.let { notes -&gt;&#13;&#10;+            notesSource.value = notes.filter { note -&gt;&#13;&#10;+                note.content.contains(query, ignoreCase = true)&#13;&#10;+            }&#13;&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;@@ -75,31 +77,66 @@&#10;     }&#13;&#10; &#13;&#10;     fun deleteNotes(noteIds: List&lt;Long&gt;) {&#13;&#10;-        viewModelScope.launch {&#13;&#10;+        // Immediately update the UI&#13;&#10;+        _currentNotes.value?.let { currentList -&gt;&#13;&#10;+            val updatedList = currentList.filter { note -&gt; note.id !in noteIds }&#13;&#10;+            notesSource.value = updatedList&#13;&#10;+            _currentNotes.value = updatedList&#13;&#10;+        }&#13;&#10;+&#13;&#10;+        // Then perform the actual database deletion&#13;&#10;+        viewModelScope.launch(Dispatchers.IO) {&#13;&#10;             for (noteId in noteIds) {&#13;&#10;-                repository.getNoteById(noteId).value?.let { note -&gt;&#13;&#10;-                    repository.deleteNote(note)&#13;&#10;+                try {&#13;&#10;+                    val note = repository.getNoteById(noteId).value&#13;&#10;+                    if (note != null) {&#13;&#10;+                        repository.deleteNote(note)&#13;&#10;+                    }&#13;&#10;+                } catch (e: Exception) {&#13;&#10;+                    // Log error if needed&#13;&#10;                 }&#13;&#10;             }&#13;&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;+    fun deleteNote(note: Note) {&#13;&#10;+        // Immediately update the UI&#13;&#10;+        _currentNotes.value?.let { currentList -&gt;&#13;&#10;+            val updatedList = currentList.filter { it.id != note.id }&#13;&#10;+            notesSource.value = updatedList&#13;&#10;+            _currentNotes.value = updatedList&#13;&#10;+        }&#13;&#10;+&#13;&#10;+        // Then perform the actual database deletion&#13;&#10;+        viewModelScope.launch(Dispatchers.IO) {&#13;&#10;+            try {&#13;&#10;+                repository.deleteNote(note)&#13;&#10;+            } catch (e: Exception) {&#13;&#10;+                // Log error if needed&#13;&#10;+            }&#13;&#10;+        }&#13;&#10;+    }&#13;&#10;+&#13;&#10;     fun createBackup() {&#13;&#10;         viewModelScope.launch {&#13;&#10;-            // Get all notes, labels, and their relationships&#13;&#10;-            val notes = withContext(Dispatchers.IO) {&#13;&#10;-                repository.getAllNotes().value ?: emptyList()&#13;&#10;-            }&#13;&#10;+            try {&#13;&#10;+                // Get all notes, labels, and their relationships&#13;&#10;+                val notes = withContext(Dispatchers.IO) {&#13;&#10;+                    repository.getAllNotes().value ?: emptyList()&#13;&#10;+                }&#13;&#10; &#13;&#10;-            val labels = withContext(Dispatchers.IO) {&#13;&#10;-                repository.getAllLabels().value ?: emptyList()&#13;&#10;-            }&#13;&#10;+                val labels = withContext(Dispatchers.IO) {&#13;&#10;+                    repository.getAllLabels().value ?: emptyList()&#13;&#10;+                }&#13;&#10; &#13;&#10;-            // This would need to be expanded to get the actual cross references&#13;&#10;-            val crossRefs = mutableListOf&lt;NoteLabelCrossRef&gt;()&#13;&#10;+                // This would need to be expanded to get the actual cross references&#13;&#10;+                val crossRefs = mutableListOf&lt;NoteLabelCrossRef&gt;()&#13;&#10; &#13;&#10;-            // Create the backup&#13;&#10;-            backupManager.createBackup(notes, labels, crossRefs)&#13;&#10;+                // Create the backup&#13;&#10;+                backupManager.createBackup(notes, labels, crossRefs)&#13;&#10;+            } catch (e: Exception) {&#13;&#10;+                // Log error if needed&#13;&#10;+            }&#13;&#10;         }&#13;&#10;     }&#13;&#10; }&#10;\ No newline at end of file&#10;&#10;" />
          <option name="timestamp" value="1743339631152" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\RestoreFragment.kt" />
          <option name="timestamp" value="1743339631152" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\NotesFragment.kt" />
          <option name="timestamp" value="1743339632436" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\NotesFragment.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\NotesFragment.kt&#10;@@ -100,8 +100,8 @@&#10;     @Suppress(&quot;DEPRECATION&quot;)&#13;&#10;     override fun onPrepareOptionsMenu(menu: Menu) {&#13;&#10;         val inSelectionMode = notesAdapter.isInSelectionMode()&#13;&#10;-        menu.findItem(R.id.action_select_all).isVisible = inSelectionMode&#13;&#10;-        menu.findItem(R.id.action_delete_selected).isVisible = inSelectionMode &amp;&amp; notesAdapter.getSelectedCount() &gt; 0&#13;&#10;+        menu.findItem(R.id.action_select_all)?.isVisible = inSelectionMode&#13;&#10;+        menu.findItem(R.id.action_delete_selected)?.isVisible = inSelectionMode &amp;&amp; notesAdapter.getSelectedCount() &gt; 0&#13;&#10; &#13;&#10;         super.onPrepareOptionsMenu(menu)&#13;&#10;     }&#13;&#10;@@ -164,15 +164,23 @@&#10;     private fun confirmDeleteNotes(noteIds: List&lt;Long&gt;) {&#13;&#10;         AlertDialog.Builder(requireContext())&#13;&#10;             .setTitle(if (noteIds.size &gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&#13;&#10;-            .setMessage(if (noteIds.size &gt; 1) getString(R.string.confirm_delete_message) else getString(R.string.confirm_delete_message))&#13;&#10;+            .setMessage(getString(R.string.confirm_delete_message))&#13;&#10;             .setPositiveButton(R.string.action_delete) { _, _ -&gt;&#13;&#10;+                // First delete the notes in the ViewModel which will update the UI immediately&#13;&#10;                 viewModel.deleteNotes(noteIds)&#13;&#10;+&#13;&#10;+                // Show a Snackbar&#13;&#10;                 Snackbar.make(&#13;&#10;                     requireView(),&#13;&#10;                     getString(R.string.notes_deleted, noteIds.size),&#13;&#10;-                    Snackbar.LENGTH_LONG&#13;&#10;+                    Snackbar.LENGTH_SHORT&#13;&#10;                 ).show()&#13;&#10;-                notesAdapter.toggleSelectionMode()&#13;&#10;+&#13;&#10;+                // Exit selection mode&#13;&#10;+                if (notesAdapter.isInSelectionMode()) {&#13;&#10;+                    notesAdapter.toggleSelectionMode()&#13;&#10;+                }&#13;&#10;+&#13;&#10;                 activity?.invalidateOptionsMenu()&#13;&#10;             }&#13;&#10;             .setNegativeButton(R.string.action_cancel) { dialog, _ -&gt;&#13;&#10;@@ -201,6 +209,23 @@&#10; &#13;&#10;     override fun onRequestDeleteNote(note: Note) {&#13;&#10;         // Single note deletion request (from long-press)&#13;&#10;-        confirmDeleteNotes(listOf(note.id))&#13;&#10;+        AlertDialog.Builder(requireContext())&#13;&#10;+            .setTitle(R.string.confirm_delete)&#13;&#10;+            .setMessage(R.string.confirm_delete_message)&#13;&#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&gt;&#13;&#10;+                // Delete the note using the direct delete method&#13;&#10;+                viewModel.deleteNote(note)&#13;&#10;+&#13;&#10;+                // Show confirmation&#13;&#10;+                Snackbar.make(&#13;&#10;+                    requireView(),&#13;&#10;+                    getString(R.string.notes_deleted, 1),&#13;&#10;+                    Snackbar.LENGTH_SHORT&#13;&#10;+                ).show()&#13;&#10;+            }&#13;&#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&gt;&#13;&#10;+                dialog.cancel()&#13;&#10;+            }&#13;&#10;+            .show()&#13;&#10;     }&#13;&#10; }&#10;\ No newline at end of file&#10;&#10;" />
          <option name="timestamp" value="1743339642160" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\LabelNotesViewModel.kt" />
          <option name="timestamp" value="1743339642160" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesViewModel.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesViewModel.kt&#10;@@ -8,7 +8,9 @@&#10; import com.xr.notes.repo.NotesRepository&#13;&#10; import com.xr.notes.utils.AppPreferenceManager&#13;&#10; import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;+import kotlinx.coroutines.Dispatchers&#13;&#10; import kotlinx.coroutines.launch&#13;&#10;+import kotlinx.coroutines.withContext&#13;&#10; import javax.inject.Inject&#13;&#10; &#13;&#10; @HiltViewModel&#13;&#10;@@ -22,6 +24,7 @@&#10;     val notesWithLabel: LiveData&lt;List&lt;Note&gt;&gt; = _notesWithLabel&#13;&#10; &#13;&#10;     private val _searchQuery = MutableLiveData&lt;String&gt;(&quot;&quot;)&#13;&#10;+    private val _currentNotes = MutableLiveData&lt;List&lt;Note&gt;&gt;(listOf())&#13;&#10; &#13;&#10;     fun setLabelId(id: Long) {&#13;&#10;         labelId = id&#13;&#10;@@ -32,6 +35,7 @@&#10;         viewModelScope.launch {&#13;&#10;             repository.getLabelWithNotes(labelId).observeForever { labelWithNotes -&gt;&#13;&#10;                 val notes = labelWithNotes?.notes ?: emptyList()&#13;&#10;+                _currentNotes.value = notes&#13;&#10;                 updateNotesList(notes)&#13;&#10;             }&#13;&#10;         }&#13;&#10;@@ -52,7 +56,7 @@&#10;         _searchQuery.value = query&#13;&#10; &#13;&#10;         // Trigger filtering of current list&#13;&#10;-        _notesWithLabel.value?.let { notes -&gt;&#13;&#10;+        _currentNotes.value?.let { notes -&gt;&#13;&#10;             _notesWithLabel.value = notes.filter { note -&gt;&#13;&#10;                 note.content.contains(query, ignoreCase = true)&#13;&#10;             }&#13;&#10;@@ -62,21 +66,56 @@&#10;     fun setSortOrder(sortOrder: String) {&#13;&#10;         prefManager.setSortOrder(sortOrder)&#13;&#10;         // Re-sort the current list based on sort order&#13;&#10;-        _notesWithLabel.value?.let { notes -&gt;&#13;&#10;-            _notesWithLabel.value = when (sortOrder) {&#13;&#10;+        _currentNotes.value?.let { notes -&gt;&#13;&#10;+            val sortedNotes = when (sortOrder) {&#13;&#10;                 AppPreferenceManager.SORT_TITLE_ASC -&gt; notes.sortedBy { it.title }&#13;&#10;                 AppPreferenceManager.SORT_DATE_CREATED_DESC -&gt; notes.sortedByDescending { it.createdAt }&#13;&#10;                 AppPreferenceManager.SORT_DATE_MODIFIED_DESC -&gt; notes.sortedByDescending { it.modifiedAt }&#13;&#10;                 else -&gt; notes.sortedByDescending { it.modifiedAt }&#13;&#10;             }&#13;&#10;+            _currentNotes.value = sortedNotes&#13;&#10;+            updateNotesList(sortedNotes)&#13;&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;     fun deleteNote(note: Note) {&#13;&#10;-        viewModelScope.launch {&#13;&#10;-            repository.deleteNote(note)&#13;&#10;-            // Reload notes after deletion&#13;&#10;-            loadNotesForLabel()&#13;&#10;+        // Immediately update the UI&#13;&#10;+        _currentNotes.value?.let { currentList -&gt;&#13;&#10;+            val updatedList = currentList.filter { it.id != note.id }&#13;&#10;+            _currentNotes.value = updatedList&#13;&#10;+            updateNotesList(updatedList)&#13;&#10;+        }&#13;&#10;+&#13;&#10;+        // Then perform the actual database deletion&#13;&#10;+        viewModelScope.launch(Dispatchers.IO) {&#13;&#10;+            try {&#13;&#10;+                repository.deleteNote(note)&#13;&#10;+            } catch (e: Exception) {&#13;&#10;+                // Log error if needed&#13;&#10;+            }&#13;&#10;+        }&#13;&#10;+    }&#13;&#10;+&#13;&#10;+    fun deleteNotes(noteIds: List&lt;Long&gt;) {&#13;&#10;+        // Immediately update the UI&#13;&#10;+        _currentNotes.value?.let { currentList -&gt;&#13;&#10;+            val updatedList = currentList.filter { note -&gt; note.id !in noteIds }&#13;&#10;+            _currentNotes.value = updatedList&#13;&#10;+            updateNotesList(updatedList)&#13;&#10;+        }&#13;&#10;+&#13;&#10;+        // Then perform the actual database deletion&#13;&#10;+        viewModelScope.launch(Dispatchers.IO) {&#13;&#10;+            for (noteId in noteIds) {&#13;&#10;+                try {&#13;&#10;+                    val note = repository.getNoteById(noteId).value&#13;&#10;+                    if (note != null) {&#13;&#10;+                        repository.deleteNote(note)&#13;&#10;+                    }&#13;&#10;+                } catch (e: Exception) {&#13;&#10;+                    // Log error if needed&#13;&#10;+                }&#13;&#10;+            }&#13;&#10;         }&#13;&#10;     }&#13;&#10; }&#10;\ No newline at end of file&#10;&#10;" />
          <option name="timestamp" value="1743339650774" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt" />
          <option name="timestamp" value="1743339650774" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&#10;@@ -123,6 +123,15 @@&#10;     }&#13;&#10; &#13;&#10;     @Suppress(&quot;DEPRECATION&quot;)&#13;&#10;+    override fun onPrepareOptionsMenu(menu: Menu) {&#13;&#10;+        val inSelectionMode = notesAdapter.isInSelectionMode()&#13;&#10;+        menu.findItem(R.id.action_select_all)?.isVisible = inSelectionMode&#13;&#10;+        menu.findItem(R.id.action_delete_selected)?.isVisible = inSelectionMode &amp;&amp; notesAdapter.getSelectedCount() &gt; 0&#13;&#10;+&#13;&#10;+        super.onPrepareOptionsMenu(menu)&#13;&#10;+    }&#13;&#10;+&#13;&#10;+    @Suppress(&quot;DEPRECATION&quot;)&#13;&#10;     override fun onOptionsItemSelected(item: MenuItem): Boolean {&#13;&#10;         return when (item.itemId) {&#13;&#10;             R.id.action_sort_title -&gt; {&#13;&#10;@@ -137,10 +146,57 @@&#10;                 viewModel.setSortOrder(AppPreferenceManager.SORT_DATE_MODIFIED_DESC)&#13;&#10;                 true&#13;&#10;             }&#13;&#10;+            R.id.action_select_all -&gt; {&#13;&#10;+                if (!notesAdapter.isInSelectionMode()) {&#13;&#10;+                    notesAdapter.toggleSelectionMode()&#13;&#10;+                }&#13;&#10;+                notesAdapter.selectAllNotes()&#13;&#10;+                activity?.invalidateOptionsMenu()&#13;&#10;+                true&#13;&#10;+            }&#13;&#10;+            R.id.action_delete_selected -&gt; {&#13;&#10;+                deleteSelectedNotes()&#13;&#10;+                true&#13;&#10;+            }&#13;&#10;             else -&gt; super.onOptionsItemSelected(item)&#13;&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;+    private fun deleteSelectedNotes() {&#13;&#10;+        val selectedIds = notesAdapter.getSelectedNoteIds()&#13;&#10;+        if (selectedIds.isNotEmpty()) {&#13;&#10;+            confirmDeleteNotes(selectedIds)&#13;&#10;+        }&#13;&#10;+    }&#13;&#10;+&#13;&#10;+    private fun confirmDeleteNotes(noteIds: List&lt;Long&gt;) {&#13;&#10;+        AlertDialog.Builder(requireContext())&#13;&#10;+            .setTitle(if (noteIds.size &gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&#13;&#10;+            .setMessage(getString(R.string.confirm_delete_message))&#13;&#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&gt;&#13;&#10;+                // Delete notes through the ViewModel&#13;&#10;+                viewModel.deleteNotes(noteIds)&#13;&#10;+&#13;&#10;+                // Show confirmation&#13;&#10;+                Snackbar.make(&#13;&#10;+                    requireView(),&#13;&#10;+                    getString(R.string.notes_deleted, noteIds.size),&#13;&#10;+                    Snackbar.LENGTH_SHORT&#13;&#10;+                ).show()&#13;&#10;+&#13;&#10;+                // Exit selection mode&#13;&#10;+                if (notesAdapter.isInSelectionMode()) {&#13;&#10;+                    notesAdapter.toggleSelectionMode()&#13;&#10;+                }&#13;&#10;+&#13;&#10;+                activity?.invalidateOptionsMenu()&#13;&#10;+            }&#13;&#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&gt;&#13;&#10;+                dialog.cancel()&#13;&#10;+            }&#13;&#10;+            .show()&#13;&#10;+    }&#13;&#10;+&#13;&#10;     private fun navigateToAddEditNote(noteId: Long?) {&#13;&#10;         // Create a bundle manually until SafeArgs generation is fixed&#13;&#10;         val bundle = Bundle().apply {&#13;&#10;@@ -164,20 +220,18 @@&#10; &#13;&#10;     override fun onRequestDeleteNote(note: Note) {&#13;&#10;         // Single note deletion request (from long-press)&#13;&#10;-        confirmDeleteNote(note)&#13;&#10;-    }&#13;&#10;-&#13;&#10;-    private fun confirmDeleteNote(note: Note) {&#13;&#10;         AlertDialog.Builder(requireContext())&#13;&#10;             .setTitle(R.string.confirm_delete)&#13;&#10;             .setMessage(R.string.confirm_delete_message)&#13;&#10;             .setPositiveButton(R.string.action_delete) { _, _ -&gt;&#13;&#10;-                // Delete the note using the viewModel&#13;&#10;+                // Delete the note using the direct delete method&#13;&#10;                 viewModel.deleteNote(note)&#13;&#10;+&#13;&#10;+                // Show confirmation&#13;&#10;                 Snackbar.make(&#13;&#10;                     requireView(),&#13;&#10;                     getString(R.string.notes_deleted, 1),&#13;&#10;-                    Snackbar.LENGTH_LONG&#13;&#10;+                    Snackbar.LENGTH_SHORT&#13;&#10;                 ).show()&#13;&#10;             }&#13;&#10;             .setNegativeButton(R.string.action_cancel) { dialog, _ -&gt;&#13;&#10;&#10;" />
          <option name="timestamp" value="1743340894139" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt" />
          <option name="timestamp" value="1743340894139" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&#10;@@ -1,14 +1,16 @@&#10;-&#13;&#10; package com.xr.notes.ui&#13;&#10; &#13;&#10; import androidx.lifecycle.LiveData&#13;&#10; import androidx.lifecycle.MutableLiveData&#13;&#10;+import androidx.lifecycle.Observer&#13;&#10; import androidx.lifecycle.ViewModel&#13;&#10; import androidx.lifecycle.viewModelScope&#13;&#10; import com.xr.notes.models.Label&#13;&#10; import com.xr.notes.models.Note&#13;&#10;+import com.xr.notes.models.NoteWithLabels&#13;&#10; import com.xr.notes.repo.NotesRepository&#13;&#10; import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;+import kotlinx.coroutines.Job&#13;&#10; import kotlinx.coroutines.launch&#13;&#10; import java.util.Date&#13;&#10; import javax.inject.Inject&#13;&#10;@@ -43,12 +45,14 @@&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;-    fun saveNote(content: String, isEncrypted: Boolean) {&#13;&#10;+    fun hasNoteBeenSaved(): Boolean = currentNoteId != -1L&#13;&#10;+&#13;&#10;+    fun saveNote(content: String, isEncrypted: Boolean): Job {&#13;&#10;         // Prevent multiple concurrent save operations&#13;&#10;-        if (isSaving) return&#13;&#10;+        if (isSaving) return viewModelScope.launch {}&#13;&#10;         isSaving = true&#13;&#10; &#13;&#10;-        viewModelScope.launch {&#13;&#10;+        return viewModelScope.launch {&#13;&#10;             try {&#13;&#10;                 val currentNote = _note.value&#13;&#10; &#13;&#10;@@ -78,23 +82,34 @@&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;-    // Rest of the methods remain unchanged&#13;&#10;     fun getAllLabels() {&#13;&#10;         viewModelScope.launch {&#13;&#10;-            val allLabels = repository.getAllLabels().value ?: emptyList()&#13;&#10;+            val allLabelsLiveData = repository.getAllLabels()&#13;&#10; &#13;&#10;-            if (currentNoteId != -1L) {&#13;&#10;-                val noteWithLabels = repository.getNoteWithLabels(currentNoteId).value&#13;&#10;-                val noteLabels = noteWithLabels?.labels ?: emptyList()&#13;&#10;+            // Use a one-time observer to get the labels&#13;&#10;+            allLabelsLiveData.observeForever(object : Observer&lt;List&lt;Label&gt;&gt; {&#13;&#10;+                override fun onChanged(labels: List&lt;Label&gt;) {&#13;&#10;+                    allLabelsLiveData.removeObserver(this)&#13;&#10;+&#13;&#10;+                    if (currentNoteId != -1L) {&#13;&#10;+                        val noteWithLabelsLiveData = repository.getNoteWithLabels(currentNoteId)&#13;&#10;+                        noteWithLabelsLiveData.observeForever(object : Observer&lt;NoteWithLabels&gt; {&#13;&#10;+                            override fun onChanged(noteWithLabels: NoteWithLabels?) {&#13;&#10;+                                noteWithLabelsLiveData.removeObserver(this)&#13;&#10; &#13;&#10;-                _labelsWithSelection.value = allLabels.map { label -&gt;&#13;&#10;-                    label to noteLabels.any { it.id == label.id }&#13;&#10;-                }&#13;&#10;-            } else {&#13;&#10;-                _labelsWithSelection.value = allLabels.map { label -&gt;&#13;&#10;-                    label to false&#13;&#10;+                                val noteLabels = noteWithLabels?.labels ?: emptyList()&#13;&#10;+                                _labelsWithSelection.value = labels.map { label -&gt;&#13;&#10;+                                    label to noteLabels.any { it.id == label.id }&#13;&#10;+                                }&#13;&#10;+                            }&#13;&#10;+                        })&#13;&#10;+                    } else {&#13;&#10;+                        _labelsWithSelection.value = labels.map { label -&gt;&#13;&#10;+                            label to false&#13;&#10;+                        }&#13;&#10;+                    }&#13;&#10;                 }&#13;&#10;-            }&#13;&#10;+            })&#13;&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;@@ -150,6 +165,4 @@&#10;             repository.deleteNote(currentNote)&#13;&#10;         }&#13;&#10;     }&#13;&#10;-&#13;&#10;-&#13;&#10; }&#10;\ No newline at end of file&#10;&#10;&#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&#10;@@ -55,6 +55,14 @@&#10;           &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&quot; /&gt;&#13;&#10;           &lt;option name=&quot;timestamp&quot; value=&quot;1743339650774&quot; /&gt;&#13;&#10;         &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;The user made the following edits:&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;#10;@@ -123,6 +123,15 @@&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;     @Suppress(&amp;quot;DEPRECATION&amp;quot;)&amp;#13;&amp;#10;+    override fun onPrepareOptionsMenu(menu: Menu) {&amp;#13;&amp;#10;+        val inSelectionMode = notesAdapter.isInSelectionMode()&amp;#13;&amp;#10;+        menu.findItem(R.id.action_select_all)?.isVisible = inSelectionMode&amp;#13;&amp;#10;+        menu.findItem(R.id.action_delete_selected)?.isVisible = inSelectionMode &amp;amp;&amp;amp; notesAdapter.getSelectedCount() &amp;gt; 0&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+        super.onPrepareOptionsMenu(menu)&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    @Suppress(&amp;quot;DEPRECATION&amp;quot;)&amp;#13;&amp;#10;     override fun onOptionsItemSelected(item: MenuItem): Boolean {&amp;#13;&amp;#10;         return when (item.itemId) {&amp;#13;&amp;#10;             R.id.action_sort_title -&amp;gt; {&amp;#13;&amp;#10;@@ -137,10 +146,57 @@&amp;#10;                 viewModel.setSortOrder(AppPreferenceManager.SORT_DATE_MODIFIED_DESC)&amp;#13;&amp;#10;                 true&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;+            R.id.action_select_all -&amp;gt; {&amp;#13;&amp;#10;+                if (!notesAdapter.isInSelectionMode()) {&amp;#13;&amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;#13;&amp;#10;+                }&amp;#13;&amp;#10;+                notesAdapter.selectAllNotes()&amp;#13;&amp;#10;+                activity?.invalidateOptionsMenu()&amp;#13;&amp;#10;+                true&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            R.id.action_delete_selected -&amp;gt; {&amp;#13;&amp;#10;+                deleteSelectedNotes()&amp;#13;&amp;#10;+                true&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;             else -&amp;gt; super.onOptionsItemSelected(item)&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;+    private fun deleteSelectedNotes() {&amp;#13;&amp;#10;+        val selectedIds = notesAdapter.getSelectedNoteIds()&amp;#13;&amp;#10;+        if (selectedIds.isNotEmpty()) {&amp;#13;&amp;#10;+            confirmDeleteNotes(selectedIds)&amp;#13;&amp;#10;+        }&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    private fun confirmDeleteNotes(noteIds: List&amp;lt;Long&amp;gt;) {&amp;#13;&amp;#10;+        AlertDialog.Builder(requireContext())&amp;#13;&amp;#10;+            .setTitle(if (noteIds.size &amp;gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&amp;#13;&amp;#10;+            .setMessage(getString(R.string.confirm_delete_message))&amp;#13;&amp;#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&amp;gt;&amp;#13;&amp;#10;+                // Delete notes through the ViewModel&amp;#13;&amp;#10;+                viewModel.deleteNotes(noteIds)&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+                // Show confirmation&amp;#13;&amp;#10;+                Snackbar.make(&amp;#13;&amp;#10;+                    requireView(),&amp;#13;&amp;#10;+                    getString(R.string.notes_deleted, noteIds.size),&amp;#13;&amp;#10;+                    Snackbar.LENGTH_SHORT&amp;#13;&amp;#10;+                ).show()&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+                // Exit selection mode&amp;#13;&amp;#10;+                if (notesAdapter.isInSelectionMode()) {&amp;#13;&amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;#13;&amp;#10;+                }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+                activity?.invalidateOptionsMenu()&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;gt;&amp;#13;&amp;#10;+                dialog.cancel()&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            .show()&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;     private fun navigateToAddEditNote(noteId: Long?) {&amp;#13;&amp;#10;         // Create a bundle manually until SafeArgs generation is fixed&amp;#13;&amp;#10;         val bundle = Bundle().apply {&amp;#13;&amp;#10;@@ -164,20 +220,18 @@&amp;#10; &amp;#13;&amp;#10;     override fun onRequestDeleteNote(note: Note) {&amp;#13;&amp;#10;         // Single note deletion request (from long-press)&amp;#13;&amp;#10;-        confirmDeleteNote(note)&amp;#13;&amp;#10;-    }&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-    private fun confirmDeleteNote(note: Note) {&amp;#13;&amp;#10;         AlertDialog.Builder(requireContext())&amp;#13;&amp;#10;             .setTitle(R.string.confirm_delete)&amp;#13;&amp;#10;             .setMessage(R.string.confirm_delete_message)&amp;#13;&amp;#10;             .setPositiveButton(R.string.action_delete) { _, _ -&amp;gt;&amp;#13;&amp;#10;-                // Delete the note using the viewModel&amp;#13;&amp;#10;+                // Delete the note using the direct delete method&amp;#13;&amp;#10;                 viewModel.deleteNote(note)&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+                // Show confirmation&amp;#13;&amp;#10;                 Snackbar.make(&amp;#13;&amp;#10;                     requireView(),&amp;#13;&amp;#10;                     getString(R.string.notes_deleted, 1),&amp;#13;&amp;#10;-                    Snackbar.LENGTH_LONG&amp;#13;&amp;#10;+                    Snackbar.LENGTH_SHORT&amp;#13;&amp;#10;                 ).show()&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;             .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;gt;&amp;#13;&amp;#10;&amp;#10;&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743340894139&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743340894139&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;       &lt;/list&gt;&#13;&#10;     &lt;/option&gt;&#13;&#10;   &lt;/component&gt;&#13;&#10;&#10;" />
          <option name="timestamp" value="1743340927816" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt" />
          <option name="timestamp" value="1743340927816" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt" />
          <option name="timestamp" value="1743340930962" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&#10;@@ -63,6 +63,18 @@&#10;           &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;           &lt;option name=&quot;timestamp&quot; value=&quot;1743340894139&quot; /&gt;&#13;&#10;         &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;The user made the following edits:&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;#10;@@ -1,14 +1,16 @@&amp;#10;-&amp;#13;&amp;#10; package com.xr.notes.ui&amp;#13;&amp;#10; &amp;#13;&amp;#10; import androidx.lifecycle.LiveData&amp;#13;&amp;#10; import androidx.lifecycle.MutableLiveData&amp;#13;&amp;#10;+import androidx.lifecycle.Observer&amp;#13;&amp;#10; import androidx.lifecycle.ViewModel&amp;#13;&amp;#10; import androidx.lifecycle.viewModelScope&amp;#13;&amp;#10; import com.xr.notes.models.Label&amp;#13;&amp;#10; import com.xr.notes.models.Note&amp;#13;&amp;#10;+import com.xr.notes.models.NoteWithLabels&amp;#13;&amp;#10; import com.xr.notes.repo.NotesRepository&amp;#13;&amp;#10; import dagger.hilt.android.lifecycle.HiltViewModel&amp;#13;&amp;#10;+import kotlinx.coroutines.Job&amp;#13;&amp;#10; import kotlinx.coroutines.launch&amp;#13;&amp;#10; import java.util.Date&amp;#13;&amp;#10; import javax.inject.Inject&amp;#13;&amp;#10;@@ -43,12 +45,14 @@&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;-    fun saveNote(content: String, isEncrypted: Boolean) {&amp;#13;&amp;#10;+    fun hasNoteBeenSaved(): Boolean = currentNoteId != -1L&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    fun saveNote(content: String, isEncrypted: Boolean): Job {&amp;#13;&amp;#10;         // Prevent multiple concurrent save operations&amp;#13;&amp;#10;-        if (isSaving) return&amp;#13;&amp;#10;+        if (isSaving) return viewModelScope.launch {}&amp;#13;&amp;#10;         isSaving = true&amp;#13;&amp;#10; &amp;#13;&amp;#10;-        viewModelScope.launch {&amp;#13;&amp;#10;+        return viewModelScope.launch {&amp;#13;&amp;#10;             try {&amp;#13;&amp;#10;                 val currentNote = _note.value&amp;#13;&amp;#10; &amp;#13;&amp;#10;@@ -78,23 +82,34 @@&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;-    // Rest of the methods remain unchanged&amp;#13;&amp;#10;     fun getAllLabels() {&amp;#13;&amp;#10;         viewModelScope.launch {&amp;#13;&amp;#10;-            val allLabels = repository.getAllLabels().value ?: emptyList()&amp;#13;&amp;#10;+            val allLabelsLiveData = repository.getAllLabels()&amp;#13;&amp;#10; &amp;#13;&amp;#10;-            if (currentNoteId != -1L) {&amp;#13;&amp;#10;-                val noteWithLabels = repository.getNoteWithLabels(currentNoteId).value&amp;#13;&amp;#10;-                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;#13;&amp;#10;+            // Use a one-time observer to get the labels&amp;#13;&amp;#10;+            allLabelsLiveData.observeForever(object : Observer&amp;lt;List&amp;lt;Label&amp;gt;&amp;gt; {&amp;#13;&amp;#10;+                override fun onChanged(labels: List&amp;lt;Label&amp;gt;) {&amp;#13;&amp;#10;+                    allLabelsLiveData.removeObserver(this)&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+                    if (currentNoteId != -1L) {&amp;#13;&amp;#10;+                        val noteWithLabelsLiveData = repository.getNoteWithLabels(currentNoteId)&amp;#13;&amp;#10;+                        noteWithLabelsLiveData.observeForever(object : Observer&amp;lt;NoteWithLabels&amp;gt; {&amp;#13;&amp;#10;+                            override fun onChanged(noteWithLabels: NoteWithLabels?) {&amp;#13;&amp;#10;+                                noteWithLabelsLiveData.removeObserver(this)&amp;#13;&amp;#10; &amp;#13;&amp;#10;-                _labelsWithSelection.value = allLabels.map { label -&amp;gt;&amp;#13;&amp;#10;-                    label to noteLabels.any { it.id == label.id }&amp;#13;&amp;#10;-                }&amp;#13;&amp;#10;-            } else {&amp;#13;&amp;#10;-                _labelsWithSelection.value = allLabels.map { label -&amp;gt;&amp;#13;&amp;#10;-                    label to false&amp;#13;&amp;#10;+                                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;#13;&amp;#10;+                                _labelsWithSelection.value = labels.map { label -&amp;gt;&amp;#13;&amp;#10;+                                    label to noteLabels.any { it.id == label.id }&amp;#13;&amp;#10;+                                }&amp;#13;&amp;#10;+                            }&amp;#13;&amp;#10;+                        })&amp;#13;&amp;#10;+                    } else {&amp;#13;&amp;#10;+                        _labelsWithSelection.value = labels.map { label -&amp;gt;&amp;#13;&amp;#10;+                            label to false&amp;#13;&amp;#10;+                        }&amp;#13;&amp;#10;+                    }&amp;#13;&amp;#10;                 }&amp;#13;&amp;#10;-            }&amp;#13;&amp;#10;+            })&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;@@ -150,6 +165,4 @@&amp;#10;             repository.deleteNote(currentNote)&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-&amp;#13;&amp;#10; }&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&amp;#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&amp;#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&amp;#10;@@ -55,6 +55,14 @@&amp;#10;           &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;           &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743339650774&amp;quot; /&amp;gt;&amp;#13;&amp;#10;         &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;The user made the following edits:&amp;amp;#10;&amp;amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;#10;@@ -123,6 +123,15 @@&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;     @Suppress(&amp;amp;quot;DEPRECATION&amp;amp;quot;)&amp;amp;#13;&amp;amp;#10;+    override fun onPrepareOptionsMenu(menu: Menu) {&amp;amp;#13;&amp;amp;#10;+        val inSelectionMode = notesAdapter.isInSelectionMode()&amp;amp;#13;&amp;amp;#10;+        menu.findItem(R.id.action_select_all)?.isVisible = inSelectionMode&amp;amp;#13;&amp;amp;#10;+        menu.findItem(R.id.action_delete_selected)?.isVisible = inSelectionMode &amp;amp;amp;&amp;amp;amp; notesAdapter.getSelectedCount() &amp;amp;gt; 0&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+        super.onPrepareOptionsMenu(menu)&amp;amp;#13;&amp;amp;#10;+    }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+    @Suppress(&amp;amp;quot;DEPRECATION&amp;amp;quot;)&amp;amp;#13;&amp;amp;#10;     override fun onOptionsItemSelected(item: MenuItem): Boolean {&amp;amp;#13;&amp;amp;#10;         return when (item.itemId) {&amp;amp;#13;&amp;amp;#10;             R.id.action_sort_title -&amp;amp;gt; {&amp;amp;#13;&amp;amp;#10;@@ -137,10 +146,57 @@&amp;amp;#10;                 viewModel.setSortOrder(AppPreferenceManager.SORT_DATE_MODIFIED_DESC)&amp;amp;#13;&amp;amp;#10;                 true&amp;amp;#13;&amp;amp;#10;             }&amp;amp;#13;&amp;amp;#10;+            R.id.action_select_all -&amp;amp;gt; {&amp;amp;#13;&amp;amp;#10;+                if (!notesAdapter.isInSelectionMode()) {&amp;amp;#13;&amp;amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;amp;#13;&amp;amp;#10;+                }&amp;amp;#13;&amp;amp;#10;+                notesAdapter.selectAllNotes()&amp;amp;#13;&amp;amp;#10;+                activity?.invalidateOptionsMenu()&amp;amp;#13;&amp;amp;#10;+                true&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+            R.id.action_delete_selected -&amp;amp;gt; {&amp;amp;#13;&amp;amp;#10;+                deleteSelectedNotes()&amp;amp;#13;&amp;amp;#10;+                true&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;             else -&amp;amp;gt; super.onOptionsItemSelected(item)&amp;amp;#13;&amp;amp;#10;         }&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;+    private fun deleteSelectedNotes() {&amp;amp;#13;&amp;amp;#10;+        val selectedIds = notesAdapter.getSelectedNoteIds()&amp;amp;#13;&amp;amp;#10;+        if (selectedIds.isNotEmpty()) {&amp;amp;#13;&amp;amp;#10;+            confirmDeleteNotes(selectedIds)&amp;amp;#13;&amp;amp;#10;+        }&amp;amp;#13;&amp;amp;#10;+    }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+    private fun confirmDeleteNotes(noteIds: List&amp;amp;lt;Long&amp;amp;gt;) {&amp;amp;#13;&amp;amp;#10;+        AlertDialog.Builder(requireContext())&amp;amp;#13;&amp;amp;#10;+            .setTitle(if (noteIds.size &amp;amp;gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&amp;amp;#13;&amp;amp;#10;+            .setMessage(getString(R.string.confirm_delete_message))&amp;amp;#13;&amp;amp;#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+                // Delete notes through the ViewModel&amp;amp;#13;&amp;amp;#10;+                viewModel.deleteNotes(noteIds)&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+                // Show confirmation&amp;amp;#13;&amp;amp;#10;+                Snackbar.make(&amp;amp;#13;&amp;amp;#10;+                    requireView(),&amp;amp;#13;&amp;amp;#10;+                    getString(R.string.notes_deleted, noteIds.size),&amp;amp;#13;&amp;amp;#10;+                    Snackbar.LENGTH_SHORT&amp;amp;#13;&amp;amp;#10;+                ).show()&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+                // Exit selection mode&amp;amp;#13;&amp;amp;#10;+                if (notesAdapter.isInSelectionMode()) {&amp;amp;#13;&amp;amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;amp;#13;&amp;amp;#10;+                }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+                activity?.invalidateOptionsMenu()&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+                dialog.cancel()&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+            .show()&amp;amp;#13;&amp;amp;#10;+    }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;     private fun navigateToAddEditNote(noteId: Long?) {&amp;amp;#13;&amp;amp;#10;         // Create a bundle manually until SafeArgs generation is fixed&amp;amp;#13;&amp;amp;#10;         val bundle = Bundle().apply {&amp;amp;#13;&amp;amp;#10;@@ -164,20 +220,18 @@&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;     override fun onRequestDeleteNote(note: Note) {&amp;amp;#13;&amp;amp;#10;         // Single note deletion request (from long-press)&amp;amp;#13;&amp;amp;#10;-        confirmDeleteNote(note)&amp;amp;#13;&amp;amp;#10;-    }&amp;amp;#13;&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10;-    private fun confirmDeleteNote(note: Note) {&amp;amp;#13;&amp;amp;#10;         AlertDialog.Builder(requireContext())&amp;amp;#13;&amp;amp;#10;             .setTitle(R.string.confirm_delete)&amp;amp;#13;&amp;amp;#10;             .setMessage(R.string.confirm_delete_message)&amp;amp;#13;&amp;amp;#10;             .setPositiveButton(R.string.action_delete) { _, _ -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;-                // Delete the note using the viewModel&amp;amp;#13;&amp;amp;#10;+                // Delete the note using the direct delete method&amp;amp;#13;&amp;amp;#10;                 viewModel.deleteNote(note)&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+                // Show confirmation&amp;amp;#13;&amp;amp;#10;                 Snackbar.make(&amp;amp;#13;&amp;amp;#10;                     requireView(),&amp;amp;#13;&amp;amp;#10;                     getString(R.string.notes_deleted, 1),&amp;amp;#13;&amp;amp;#10;-                    Snackbar.LENGTH_LONG&amp;amp;#13;&amp;amp;#10;+                    Snackbar.LENGTH_SHORT&amp;amp;#13;&amp;amp;#10;                 ).show()&amp;amp;#13;&amp;amp;#10;             }&amp;amp;#13;&amp;amp;#10;             .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;&amp;amp;#10;&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340894139&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340894139&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;       &amp;lt;/list&amp;gt;&amp;#13;&amp;#10;     &amp;lt;/option&amp;gt;&amp;#13;&amp;#10;   &amp;lt;/component&amp;gt;&amp;#13;&amp;#10;&amp;#10;&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743340927816&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743340927816&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743340930962&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;       &lt;/list&gt;&#13;&#10;     &lt;/option&gt;&#13;&#10;   &lt;/component&gt;&#13;&#10;&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&#10;@@ -1,7 +1,7 @@&#10;-&#13;&#10; package com.xr.notes.ui&#13;&#10; &#13;&#10; import android.os.Bundle&#13;&#10;+import android.util.Log&#13;&#10; import android.view.LayoutInflater&#13;&#10; import android.view.Menu&#13;&#10; import android.view.MenuInflater&#13;&#10;@@ -153,14 +153,64 @@&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;-    // Rest of the functions remain unchanged&#13;&#10;     private fun showLabelsDialog() {&#13;&#10;-        viewModel.getAllLabels()&#13;&#10;+        // Clear previous observers to avoid duplicates&#13;&#10;+        viewModel.labelsWithSelection.removeObservers(viewLifecycleOwner)&#13;&#10;+&#13;&#10;+        // If this is a new note that hasn't been saved yet&#13;&#10;+        if (args.noteId == -1L &amp;&amp; !viewModel.hasNoteBeenSaved()) {&#13;&#10;+            // First save the note&#13;&#10;+            val content = editTextNote.text.toString().trim()&#13;&#10;+            if (content.isEmpty()) {&#13;&#10;+                Snackbar.make(requireView(), R.string.error_empty_note, Snackbar.LENGTH_SHORT).show()&#13;&#10;+                return&#13;&#10;+            }&#13;&#10;+&#13;&#10;+            // Show a loading indicator&#13;&#10;+            val loadingDialog = AlertDialog.Builder(requireContext())&#13;&#10;+                .setMessage(&quot;Saving note...&quot;)&#13;&#10;+                .setCancelable(false)&#13;&#10;+                .create()&#13;&#10;+            loadingDialog.show()&#13;&#10;+&#13;&#10;+            // Save the note first, then show the labels dialog&#13;&#10;+            viewModel.saveNote(content, isEncrypted).invokeOnCompletion {&#13;&#10;+                requireActivity().runOnUiThread {&#13;&#10;+                    loadingDialog.dismiss()&#13;&#10;+                    // Now that the note is saved, get the labels&#13;&#10;+                    viewModel.getAllLabels()&#13;&#10;+                }&#13;&#10;+            }&#13;&#10;+        } else {&#13;&#10;+            // Existing note, just get the labels&#13;&#10;+            viewModel.getAllLabels()&#13;&#10;+        }&#13;&#10; &#13;&#10;         viewModel.labelsWithSelection.observe(viewLifecycleOwner) { labelsWithSelection -&gt;&#13;&#10;+            if (labelsWithSelection.isEmpty()) {&#13;&#10;+                // Show a message if no labels are available&#13;&#10;+                AlertDialog.Builder(requireContext())&#13;&#10;+                    .setTitle(R.string.select_labels)&#13;&#10;+                    .setMessage(&quot;No labels available. Create a label first.&quot;)&#13;&#10;+                    .setPositiveButton(R.string.action_done) { dialog, _ -&gt;&#13;&#10;+                        dialog.dismiss()&#13;&#10;+                    }&#13;&#10;+                    .setNeutralButton(R.string.action_new_label) { _, _ -&gt;&#13;&#10;+                        showNewLabelDialog()&#13;&#10;+                    }&#13;&#10;+                    .show()&#13;&#10;+                return@observe&#13;&#10;+            }&#13;&#10;+&#13;&#10;             val labelNames = labelsWithSelection.map { it.first.name }.toTypedArray()&#13;&#10;             val checkedItems = labelsWithSelection.map { it.second }.toBooleanArray()&#13;&#10; &#13;&#10;+            // Log for debugging&#13;&#10;+            Log.d(&quot;LabelsDialog&quot;, &quot;Label count: ${labelNames.size}&quot;)&#13;&#10;+            for (i in labelNames.indices) {&#13;&#10;+                Log.d(&quot;LabelsDialog&quot;, &quot;Label: ${labelNames[i]}, Checked: ${checkedItems[i]}&quot;)&#13;&#10;+            }&#13;&#10;+&#13;&#10;             MaterialAlertDialogBuilder(requireContext())&#13;&#10;                 .setTitle(R.string.select_labels)&#13;&#10;                 .setMultiChoiceItems(labelNames, checkedItems) { _, position, isChecked -&gt;&#13;&#10;@@ -272,4 +322,4 @@&#10;             }&#13;&#10;             .show()&#13;&#10;     }&#13;&#10;-}&#13;&#10;+}&#10;\ No newline at end of file&#10;&#10;" />
          <option name="timestamp" value="1743341027978" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\repo\NotesRepo.kt" />
          <option name="timestamp" value="1743341027978" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&#10;+++ b/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&#10;@@ -29,9 +29,7 @@&#10;     fun getNoteById(noteId: Long): LiveData&lt;Note&gt; = noteDao.getNoteById(noteId)&#13;&#10; &#13;&#10;     fun searchNotes(query: String): LiveData&lt;List&lt;Note&gt;&gt; = noteDao.searchNotes(query)&#13;&#10;-&#13;&#10;-    fun getNoteWithLabels(noteId: Long): LiveData&lt;NoteWithLabels&gt; = noteDao.getNoteWithLabels(noteId)&#13;&#10;-&#13;&#10;+    &#13;&#10;     fun getAllNotesWithLabels(): LiveData&lt;List&lt;NoteWithLabels&gt;&gt; = noteDao.getAllNotesWithLabels()&#13;&#10; &#13;&#10;     suspend fun insertNote(note: Note): Long {&#13;&#10;@@ -89,7 +87,8 @@&#10; &#13;&#10;     suspend fun deleteAllLabels() = labelDao.deleteAllLabels()&#13;&#10; &#13;&#10;-    // Note-Label relationship operations&#13;&#10;+    fun getNoteWithLabels(noteId: Long): LiveData&lt;NoteWithLabels&gt; = noteDao.getNoteWithLabels(noteId)&#13;&#10;+&#13;&#10;     suspend fun addLabelToNote(noteId: Long, labelId: Long) {&#13;&#10;         noteDao.insertNoteLabelCrossRef(NoteLabelCrossRef(noteId, labelId))&#13;&#10;     }&#13;&#10;&#10;&#10;--- a/app\build\generated\source\kapt\debug\com\xr\notes\ui\LabelNotesViewModel_HiltModules.java&#10;+++ b/app\build\generated\source\kapt\debug\com\xr\notes\ui\LabelNotesViewModel_HiltModules.java&#10;@@ -1,52 +0,0 @@&#10;-package com.xr.notes.ui;&#10;-&#10;-import androidx.lifecycle.ViewModel;&#10;-import dagger.Binds;&#10;-import dagger.Module;&#10;-import dagger.Provides;&#10;-import dagger.hilt.InstallIn;&#10;-import dagger.hilt.android.components.ActivityRetainedComponent;&#10;-import dagger.hilt.android.components.ViewModelComponent;&#10;-import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;&#10;-import dagger.hilt.codegen.OriginatingElement;&#10;-import dagger.multibindings.IntoMap;&#10;-import dagger.multibindings.IntoSet;&#10;-import dagger.multibindings.StringKey;&#10;-import java.lang.String;&#10;-import javax.annotation.processing.Generated;&#10;-&#10;-@Generated(&quot;dagger.hilt.android.processor.internal.viewmodel.ViewModelProcessor&quot;)&#10;-@OriginatingElement(&#10;-    topLevelClass = LabelNotesViewModel.class&#10;-)&#10;-public final class LabelNotesViewModel_HiltModules {&#10;-  private LabelNotesViewModel_HiltModules() {&#10;-  }&#10;-&#10;-  @Module&#10;-  @InstallIn(ViewModelComponent.class)&#10;-  public abstract static class BindsModule {&#10;-    private BindsModule() {&#10;-    }&#10;-&#10;-    @Binds&#10;-    @IntoMap&#10;-    @StringKey(&quot;com.xr.notes.ui.LabelNotesViewModel&quot;)&#10;-    @HiltViewModelMap&#10;-    public abstract ViewModel binds(LabelNotesViewModel vm);&#10;-  }&#10;-&#10;-  @Module&#10;-  @InstallIn(ActivityRetainedComponent.class)&#10;-  public static final class KeyModule {&#10;-    private KeyModule() {&#10;-    }&#10;-&#10;-    @Provides&#10;-    @IntoSet&#10;-    @HiltViewModelMap.KeySet&#10;-    public static String provide() {&#10;-      return &quot;com.xr.notes.ui.LabelNotesViewModel&quot;;&#10;-    }&#10;-  }&#10;-}&#10;&#10;&#10;--- a/app\build\generated\source\kapt\debug\com\xr\notes\ui\NotesViewModel_HiltModules.java&#10;+++ b/app\build\generated\source\kapt\debug\com\xr\notes\ui\NotesViewModel_HiltModules.java&#10;@@ -1,52 +0,0 @@&#10;-package com.xr.notes.ui;&#10;-&#10;-import androidx.lifecycle.ViewModel;&#10;-import dagger.Binds;&#10;-import dagger.Module;&#10;-import dagger.Provides;&#10;-import dagger.hilt.InstallIn;&#10;-import dagger.hilt.android.components.ActivityRetainedComponent;&#10;-import dagger.hilt.android.components.ViewModelComponent;&#10;-import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;&#10;-import dagger.hilt.codegen.OriginatingElement;&#10;-import dagger.multibindings.IntoMap;&#10;-import dagger.multibindings.IntoSet;&#10;-import dagger.multibindings.StringKey;&#10;-import java.lang.String;&#10;-import javax.annotation.processing.Generated;&#10;-&#10;-@Generated(&quot;dagger.hilt.android.processor.internal.viewmodel.ViewModelProcessor&quot;)&#10;-@OriginatingElement(&#10;-    topLevelClass = NotesViewModel.class&#10;-)&#10;-public final class NotesViewModel_HiltModules {&#10;-  private NotesViewModel_HiltModules() {&#10;-  }&#10;-&#10;-  @Module&#10;-  @InstallIn(ViewModelComponent.class)&#10;-  public abstract static class BindsModule {&#10;-    private BindsModule() {&#10;-    }&#10;-&#10;-    @Binds&#10;-    @IntoMap&#10;-    @StringKey(&quot;com.xr.notes.ui.NotesViewModel&quot;)&#10;-    @HiltViewModelMap&#10;-    public abstract ViewModel binds(NotesViewModel vm);&#10;-  }&#10;-&#10;-  @Module&#10;-  @InstallIn(ActivityRetainedComponent.class)&#10;-  public static final class KeyModule {&#10;-    private KeyModule() {&#10;-    }&#10;-&#10;-    @Provides&#10;-    @IntoSet&#10;-    @HiltViewModelMap.KeySet&#10;-    public static String provide() {&#10;-      return &quot;com.xr.notes.ui.NotesViewModel&quot;;&#10;-    }&#10;-  }&#10;-}&#10;&#10;" />
          <option name="timestamp" value="1743341057469" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt" />
          <option name="timestamp" value="1743341057469" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt" />
          <option name="timestamp" value="1743341059181" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt" />
          <option name="timestamp" value="1743341060371" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&#10;@@ -2,7 +2,6 @@&#10; &#13;&#10; import androidx.lifecycle.LiveData&#13;&#10; import androidx.lifecycle.MutableLiveData&#13;&#10;-import androidx.lifecycle.Observer&#13;&#10; import androidx.lifecycle.ViewModel&#13;&#10; import androidx.lifecycle.viewModelScope&#13;&#10; import com.xr.notes.models.Label&#13;&#10;@@ -84,32 +83,24 @@&#10; &#13;&#10;     fun getAllLabels() {&#13;&#10;         viewModelScope.launch {&#13;&#10;-            val allLabelsLiveData = repository.getAllLabels()&#13;&#10;+            // Get all labels&#13;&#10;+            val labels = repository.getAllLabels().value ?: emptyList()&#13;&#10; &#13;&#10;-            // Use a one-time observer to get the labels&#13;&#10;-            allLabelsLiveData.observeForever(object : Observer&lt;List&lt;Label&gt;&gt; {&#13;&#10;-                override fun onChanged(labels: List&lt;Label&gt;) {&#13;&#10;-                    allLabelsLiveData.removeObserver(this)&#13;&#10;+            if (currentNoteId != -1L) {&#13;&#10;+                // For existing note, get associated labels&#13;&#10;+                val noteWithLabels = repository.getNoteWithLabels(currentNoteId).value&#13;&#10;+                val noteLabels = noteWithLabels?.labels ?: emptyList()&#13;&#10; &#13;&#10;-                    if (currentNoteId != -1L) {&#13;&#10;-                        val noteWithLabelsLiveData = repository.getNoteWithLabels(currentNoteId)&#13;&#10;-                        noteWithLabelsLiveData.observeForever(object : Observer&lt;NoteWithLabels&gt; {&#13;&#10;-                            override fun onChanged(noteWithLabels: NoteWithLabels?) {&#13;&#10;-                                noteWithLabelsLiveData.removeObserver(this)&#13;&#10;-&#13;&#10;-                                val noteLabels = noteWithLabels?.labels ?: emptyList()&#13;&#10;-                                _labelsWithSelection.value = labels.map { label -&gt;&#13;&#10;-                                    label to noteLabels.any { it.id == label.id }&#13;&#10;-                                }&#13;&#10;-                            }&#13;&#10;-                        })&#13;&#10;-                    } else {&#13;&#10;-                        _labelsWithSelection.value = labels.map { label -&gt;&#13;&#10;-                            label to false&#13;&#10;-                        }&#13;&#10;-                    }&#13;&#10;+                // Create pairs of (label, isSelected)&#13;&#10;+                _labelsWithSelection.value = labels.map { label -&gt;&#13;&#10;+                    label to noteLabels.any { it.id == label.id }&#13;&#10;+                }&#13;&#10;+            } else {&#13;&#10;+                // For a new note, all labels are unselected&#13;&#10;+                _labelsWithSelection.value = labels.map { label -&gt;&#13;&#10;+                    label to false&#13;&#10;                 }&#13;&#10;-            })&#13;&#10;+            }&#13;&#10;         }&#13;&#10;     }&#13;&#10; &#13;&#10;&#10;&#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&#10;@@ -75,6 +75,30 @@&#10;           &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;           &lt;option name=&quot;timestamp&quot; value=&quot;1743340930962&quot; /&gt;&#13;&#10;         &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;The user made the following edits:&amp;#10;&amp;#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&amp;#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&amp;#10;@@ -63,6 +63,18 @@&amp;#10;           &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;           &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340894139&amp;quot; /&amp;gt;&amp;#13;&amp;#10;         &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;The user made the following edits:&amp;amp;#10;&amp;amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;#10;@@ -1,14 +1,16 @@&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10; package com.xr.notes.ui&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10; import androidx.lifecycle.LiveData&amp;amp;#13;&amp;amp;#10; import androidx.lifecycle.MutableLiveData&amp;amp;#13;&amp;amp;#10;+import androidx.lifecycle.Observer&amp;amp;#13;&amp;amp;#10; import androidx.lifecycle.ViewModel&amp;amp;#13;&amp;amp;#10; import androidx.lifecycle.viewModelScope&amp;amp;#13;&amp;amp;#10; import com.xr.notes.models.Label&amp;amp;#13;&amp;amp;#10; import com.xr.notes.models.Note&amp;amp;#13;&amp;amp;#10;+import com.xr.notes.models.NoteWithLabels&amp;amp;#13;&amp;amp;#10; import com.xr.notes.repo.NotesRepository&amp;amp;#13;&amp;amp;#10; import dagger.hilt.android.lifecycle.HiltViewModel&amp;amp;#13;&amp;amp;#10;+import kotlinx.coroutines.Job&amp;amp;#13;&amp;amp;#10; import kotlinx.coroutines.launch&amp;amp;#13;&amp;amp;#10; import java.util.Date&amp;amp;#13;&amp;amp;#10; import javax.inject.Inject&amp;amp;#13;&amp;amp;#10;@@ -43,12 +45,14 @@&amp;amp;#10;         }&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-    fun saveNote(content: String, isEncrypted: Boolean) {&amp;amp;#13;&amp;amp;#10;+    fun hasNoteBeenSaved(): Boolean = currentNoteId != -1L&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+    fun saveNote(content: String, isEncrypted: Boolean): Job {&amp;amp;#13;&amp;amp;#10;         // Prevent multiple concurrent save operations&amp;amp;#13;&amp;amp;#10;-        if (isSaving) return&amp;amp;#13;&amp;amp;#10;+        if (isSaving) return viewModelScope.launch {}&amp;amp;#13;&amp;amp;#10;         isSaving = true&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-        viewModelScope.launch {&amp;amp;#13;&amp;amp;#10;+        return viewModelScope.launch {&amp;amp;#13;&amp;amp;#10;             try {&amp;amp;#13;&amp;amp;#10;                 val currentNote = _note.value&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;@@ -78,23 +82,34 @@&amp;amp;#10;         }&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-    // Rest of the methods remain unchanged&amp;amp;#13;&amp;amp;#10;     fun getAllLabels() {&amp;amp;#13;&amp;amp;#10;         viewModelScope.launch {&amp;amp;#13;&amp;amp;#10;-            val allLabels = repository.getAllLabels().value ?: emptyList()&amp;amp;#13;&amp;amp;#10;+            val allLabelsLiveData = repository.getAllLabels()&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-            if (currentNoteId != -1L) {&amp;amp;#13;&amp;amp;#10;-                val noteWithLabels = repository.getNoteWithLabels(currentNoteId).value&amp;amp;#13;&amp;amp;#10;-                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;amp;#13;&amp;amp;#10;+            // Use a one-time observer to get the labels&amp;amp;#13;&amp;amp;#10;+            allLabelsLiveData.observeForever(object : Observer&amp;amp;lt;List&amp;amp;lt;Label&amp;amp;gt;&amp;amp;gt; {&amp;amp;#13;&amp;amp;#10;+                override fun onChanged(labels: List&amp;amp;lt;Label&amp;amp;gt;) {&amp;amp;#13;&amp;amp;#10;+                    allLabelsLiveData.removeObserver(this)&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+                    if (currentNoteId != -1L) {&amp;amp;#13;&amp;amp;#10;+                        val noteWithLabelsLiveData = repository.getNoteWithLabels(currentNoteId)&amp;amp;#13;&amp;amp;#10;+                        noteWithLabelsLiveData.observeForever(object : Observer&amp;amp;lt;NoteWithLabels&amp;amp;gt; {&amp;amp;#13;&amp;amp;#10;+                            override fun onChanged(noteWithLabels: NoteWithLabels?) {&amp;amp;#13;&amp;amp;#10;+                                noteWithLabelsLiveData.removeObserver(this)&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-                _labelsWithSelection.value = allLabels.map { label -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;-                    label to noteLabels.any { it.id == label.id }&amp;amp;#13;&amp;amp;#10;-                }&amp;amp;#13;&amp;amp;#10;-            } else {&amp;amp;#13;&amp;amp;#10;-                _labelsWithSelection.value = allLabels.map { label -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;-                    label to false&amp;amp;#13;&amp;amp;#10;+                                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;amp;#13;&amp;amp;#10;+                                _labelsWithSelection.value = labels.map { label -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+                                    label to noteLabels.any { it.id == label.id }&amp;amp;#13;&amp;amp;#10;+                                }&amp;amp;#13;&amp;amp;#10;+                            }&amp;amp;#13;&amp;amp;#10;+                        })&amp;amp;#13;&amp;amp;#10;+                    } else {&amp;amp;#13;&amp;amp;#10;+                        _labelsWithSelection.value = labels.map { label -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+                            label to false&amp;amp;#13;&amp;amp;#10;+                        }&amp;amp;#13;&amp;amp;#10;+                    }&amp;amp;#13;&amp;amp;#10;                 }&amp;amp;#13;&amp;amp;#10;-            }&amp;amp;#13;&amp;amp;#10;+            })&amp;amp;#13;&amp;amp;#10;         }&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;@@ -150,6 +165,4 @@&amp;amp;#10;             repository.deleteNote(currentNote)&amp;amp;#13;&amp;amp;#10;         }&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10; }&amp;amp;#10;\ No newline at end of file&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&amp;amp;#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&amp;amp;#10;@@ -55,6 +55,14 @@&amp;amp;#10;           &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;           &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743339650774&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;         &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;The user made the following edits:&amp;amp;amp;#10;&amp;amp;amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;amp;#10;@@ -123,6 +123,15 @@&amp;amp;amp;#10;     }&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;     @Suppress(&amp;amp;amp;quot;DEPRECATION&amp;amp;amp;quot;)&amp;amp;amp;#13;&amp;amp;amp;#10;+    override fun onPrepareOptionsMenu(menu: Menu) {&amp;amp;amp;#13;&amp;amp;amp;#10;+        val inSelectionMode = notesAdapter.isInSelectionMode()&amp;amp;amp;#13;&amp;amp;amp;#10;+        menu.findItem(R.id.action_select_all)?.isVisible = inSelectionMode&amp;amp;amp;#13;&amp;amp;amp;#10;+        menu.findItem(R.id.action_delete_selected)?.isVisible = inSelectionMode &amp;amp;amp;amp;&amp;amp;amp;amp; notesAdapter.getSelectedCount() &amp;amp;amp;gt; 0&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+        super.onPrepareOptionsMenu(menu)&amp;amp;amp;#13;&amp;amp;amp;#10;+    }&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+    @Suppress(&amp;amp;amp;quot;DEPRECATION&amp;amp;amp;quot;)&amp;amp;amp;#13;&amp;amp;amp;#10;     override fun onOptionsItemSelected(item: MenuItem): Boolean {&amp;amp;amp;#13;&amp;amp;amp;#10;         return when (item.itemId) {&amp;amp;amp;#13;&amp;amp;amp;#10;             R.id.action_sort_title -&amp;amp;amp;gt; {&amp;amp;amp;#13;&amp;amp;amp;#10;@@ -137,10 +146,57 @@&amp;amp;amp;#10;                 viewModel.setSortOrder(AppPreferenceManager.SORT_DATE_MODIFIED_DESC)&amp;amp;amp;#13;&amp;amp;amp;#10;                 true&amp;amp;amp;#13;&amp;amp;amp;#10;             }&amp;amp;amp;#13;&amp;amp;amp;#10;+            R.id.action_select_all -&amp;amp;amp;gt; {&amp;amp;amp;#13;&amp;amp;amp;#10;+                if (!notesAdapter.isInSelectionMode()) {&amp;amp;amp;#13;&amp;amp;amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;amp;amp;#13;&amp;amp;amp;#10;+                }&amp;amp;amp;#13;&amp;amp;amp;#10;+                notesAdapter.selectAllNotes()&amp;amp;amp;#13;&amp;amp;amp;#10;+                activity?.invalidateOptionsMenu()&amp;amp;amp;#13;&amp;amp;amp;#10;+                true&amp;amp;amp;#13;&amp;amp;amp;#10;+            }&amp;amp;amp;#13;&amp;amp;amp;#10;+            R.id.action_delete_selected -&amp;amp;amp;gt; {&amp;amp;amp;#13;&amp;amp;amp;#10;+                deleteSelectedNotes()&amp;amp;amp;#13;&amp;amp;amp;#10;+                true&amp;amp;amp;#13;&amp;amp;amp;#10;+            }&amp;amp;amp;#13;&amp;amp;amp;#10;             else -&amp;amp;amp;gt; super.onOptionsItemSelected(item)&amp;amp;amp;#13;&amp;amp;amp;#10;         }&amp;amp;amp;#13;&amp;amp;amp;#10;     }&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;+    private fun deleteSelectedNotes() {&amp;amp;amp;#13;&amp;amp;amp;#10;+        val selectedIds = notesAdapter.getSelectedNoteIds()&amp;amp;amp;#13;&amp;amp;amp;#10;+        if (selectedIds.isNotEmpty()) {&amp;amp;amp;#13;&amp;amp;amp;#10;+            confirmDeleteNotes(selectedIds)&amp;amp;amp;#13;&amp;amp;amp;#10;+        }&amp;amp;amp;#13;&amp;amp;amp;#10;+    }&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+    private fun confirmDeleteNotes(noteIds: List&amp;amp;amp;lt;Long&amp;amp;amp;gt;) {&amp;amp;amp;#13;&amp;amp;amp;#10;+        AlertDialog.Builder(requireContext())&amp;amp;amp;#13;&amp;amp;amp;#10;+            .setTitle(if (noteIds.size &amp;amp;amp;gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&amp;amp;amp;#13;&amp;amp;amp;#10;+            .setMessage(getString(R.string.confirm_delete_message))&amp;amp;amp;#13;&amp;amp;amp;#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+                // Delete notes through the ViewModel&amp;amp;amp;#13;&amp;amp;amp;#10;+                viewModel.deleteNotes(noteIds)&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+                // Show confirmation&amp;amp;amp;#13;&amp;amp;amp;#10;+                Snackbar.make(&amp;amp;amp;#13;&amp;amp;amp;#10;+                    requireView(),&amp;amp;amp;#13;&amp;amp;amp;#10;+                    getString(R.string.notes_deleted, noteIds.size),&amp;amp;amp;#13;&amp;amp;amp;#10;+                    Snackbar.LENGTH_SHORT&amp;amp;amp;#13;&amp;amp;amp;#10;+                ).show()&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+                // Exit selection mode&amp;amp;amp;#13;&amp;amp;amp;#10;+                if (notesAdapter.isInSelectionMode()) {&amp;amp;amp;#13;&amp;amp;amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;amp;amp;#13;&amp;amp;amp;#10;+                }&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+                activity?.invalidateOptionsMenu()&amp;amp;amp;#13;&amp;amp;amp;#10;+            }&amp;amp;amp;#13;&amp;amp;amp;#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+                dialog.cancel()&amp;amp;amp;#13;&amp;amp;amp;#10;+            }&amp;amp;amp;#13;&amp;amp;amp;#10;+            .show()&amp;amp;amp;#13;&amp;amp;amp;#10;+    }&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;     private fun navigateToAddEditNote(noteId: Long?) {&amp;amp;amp;#13;&amp;amp;amp;#10;         // Create a bundle manually until SafeArgs generation is fixed&amp;amp;amp;#13;&amp;amp;amp;#10;         val bundle = Bundle().apply {&amp;amp;amp;#13;&amp;amp;amp;#10;@@ -164,20 +220,18 @@&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;     override fun onRequestDeleteNote(note: Note) {&amp;amp;amp;#13;&amp;amp;amp;#10;         // Single note deletion request (from long-press)&amp;amp;amp;#13;&amp;amp;amp;#10;-        confirmDeleteNote(note)&amp;amp;amp;#13;&amp;amp;amp;#10;-    }&amp;amp;amp;#13;&amp;amp;amp;#10;-&amp;amp;amp;#13;&amp;amp;amp;#10;-    private fun confirmDeleteNote(note: Note) {&amp;amp;amp;#13;&amp;amp;amp;#10;         AlertDialog.Builder(requireContext())&amp;amp;amp;#13;&amp;amp;amp;#10;             .setTitle(R.string.confirm_delete)&amp;amp;amp;#13;&amp;amp;amp;#10;             .setMessage(R.string.confirm_delete_message)&amp;amp;amp;#13;&amp;amp;amp;#10;             .setPositiveButton(R.string.action_delete) { _, _ -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;-                // Delete the note using the viewModel&amp;amp;amp;#13;&amp;amp;amp;#10;+                // Delete the note using the direct delete method&amp;amp;amp;#13;&amp;amp;amp;#10;                 viewModel.deleteNote(note)&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+                // Show confirmation&amp;amp;amp;#13;&amp;amp;amp;#10;                 Snackbar.make(&amp;amp;amp;#13;&amp;amp;amp;#10;                     requireView(),&amp;amp;amp;#13;&amp;amp;amp;#10;                     getString(R.string.notes_deleted, 1),&amp;amp;amp;#13;&amp;amp;amp;#10;-                    Snackbar.LENGTH_LONG&amp;amp;amp;#13;&amp;amp;amp;#10;+                    Snackbar.LENGTH_SHORT&amp;amp;amp;#13;&amp;amp;amp;#10;                 ).show()&amp;amp;amp;#13;&amp;amp;amp;#10;             }&amp;amp;amp;#13;&amp;amp;amp;#10;             .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;&amp;amp;amp;#10;&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743340894139&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743340894139&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;       &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;     &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;   &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;&amp;amp;#10;&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340927816&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340927816&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340930962&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;       &amp;lt;/list&amp;gt;&amp;#13;&amp;#10;     &amp;lt;/option&amp;gt;&amp;#13;&amp;#10;   &amp;lt;/component&amp;gt;&amp;#13;&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;#10;@@ -1,7 +1,7 @@&amp;#10;-&amp;#13;&amp;#10; package com.xr.notes.ui&amp;#13;&amp;#10; &amp;#13;&amp;#10; import android.os.Bundle&amp;#13;&amp;#10;+import android.util.Log&amp;#13;&amp;#10; import android.view.LayoutInflater&amp;#13;&amp;#10; import android.view.Menu&amp;#13;&amp;#10; import android.view.MenuInflater&amp;#13;&amp;#10;@@ -153,14 +153,64 @@&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;-    // Rest of the functions remain unchanged&amp;#13;&amp;#10;     private fun showLabelsDialog() {&amp;#13;&amp;#10;-        viewModel.getAllLabels()&amp;#13;&amp;#10;+        // Clear previous observers to avoid duplicates&amp;#13;&amp;#10;+        viewModel.labelsWithSelection.removeObservers(viewLifecycleOwner)&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+        // If this is a new note that hasn't been saved yet&amp;#13;&amp;#10;+        if (args.noteId == -1L &amp;amp;&amp;amp; !viewModel.hasNoteBeenSaved()) {&amp;#13;&amp;#10;+            // First save the note&amp;#13;&amp;#10;+            val content = editTextNote.text.toString().trim()&amp;#13;&amp;#10;+            if (content.isEmpty()) {&amp;#13;&amp;#10;+                Snackbar.make(requireView(), R.string.error_empty_note, Snackbar.LENGTH_SHORT).show()&amp;#13;&amp;#10;+                return&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+            // Show a loading indicator&amp;#13;&amp;#10;+            val loadingDialog = AlertDialog.Builder(requireContext())&amp;#13;&amp;#10;+                .setMessage(&amp;quot;Saving note...&amp;quot;)&amp;#13;&amp;#10;+                .setCancelable(false)&amp;#13;&amp;#10;+                .create()&amp;#13;&amp;#10;+            loadingDialog.show()&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+            // Save the note first, then show the labels dialog&amp;#13;&amp;#10;+            viewModel.saveNote(content, isEncrypted).invokeOnCompletion {&amp;#13;&amp;#10;+                requireActivity().runOnUiThread {&amp;#13;&amp;#10;+                    loadingDialog.dismiss()&amp;#13;&amp;#10;+                    // Now that the note is saved, get the labels&amp;#13;&amp;#10;+                    viewModel.getAllLabels()&amp;#13;&amp;#10;+                }&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+        } else {&amp;#13;&amp;#10;+            // Existing note, just get the labels&amp;#13;&amp;#10;+            viewModel.getAllLabels()&amp;#13;&amp;#10;+        }&amp;#13;&amp;#10; &amp;#13;&amp;#10;         viewModel.labelsWithSelection.observe(viewLifecycleOwner) { labelsWithSelection -&amp;gt;&amp;#13;&amp;#10;+            if (labelsWithSelection.isEmpty()) {&amp;#13;&amp;#10;+                // Show a message if no labels are available&amp;#13;&amp;#10;+                AlertDialog.Builder(requireContext())&amp;#13;&amp;#10;+                    .setTitle(R.string.select_labels)&amp;#13;&amp;#10;+                    .setMessage(&amp;quot;No labels available. Create a label first.&amp;quot;)&amp;#13;&amp;#10;+                    .setPositiveButton(R.string.action_done) { dialog, _ -&amp;gt;&amp;#13;&amp;#10;+                        dialog.dismiss()&amp;#13;&amp;#10;+                    }&amp;#13;&amp;#10;+                    .setNeutralButton(R.string.action_new_label) { _, _ -&amp;gt;&amp;#13;&amp;#10;+                        showNewLabelDialog()&amp;#13;&amp;#10;+                    }&amp;#13;&amp;#10;+                    .show()&amp;#13;&amp;#10;+                return@observe&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;             val labelNames = labelsWithSelection.map { it.first.name }.toTypedArray()&amp;#13;&amp;#10;             val checkedItems = labelsWithSelection.map { it.second }.toBooleanArray()&amp;#13;&amp;#10; &amp;#13;&amp;#10;+            // Log for debugging&amp;#13;&amp;#10;+            Log.d(&amp;quot;LabelsDialog&amp;quot;, &amp;quot;Label count: ${labelNames.size}&amp;quot;)&amp;#13;&amp;#10;+            for (i in labelNames.indices) {&amp;#13;&amp;#10;+                Log.d(&amp;quot;LabelsDialog&amp;quot;, &amp;quot;Label: ${labelNames[i]}, Checked: ${checkedItems[i]}&amp;quot;)&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;             MaterialAlertDialogBuilder(requireContext())&amp;#13;&amp;#10;                 .setTitle(R.string.select_labels)&amp;#13;&amp;#10;                 .setMultiChoiceItems(labelNames, checkedItems) { _, position, isChecked -&amp;gt;&amp;#13;&amp;#10;@@ -272,4 +322,4 @@&amp;#10;             }&amp;#13;&amp;#10;             .show()&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;-}&amp;#13;&amp;#10;+}&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341027978&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\repo\NotesRepo.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341027978&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;The user made the following edits:&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;#10;@@ -29,9 +29,7 @@&amp;#10;     fun getNoteById(noteId: Long): LiveData&amp;lt;Note&amp;gt; = noteDao.getNoteById(noteId)&amp;#13;&amp;#10; &amp;#13;&amp;#10;     fun searchNotes(query: String): LiveData&amp;lt;List&amp;lt;Note&amp;gt;&amp;gt; = noteDao.searchNotes(query)&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-    fun getNoteWithLabels(noteId: Long): LiveData&amp;lt;NoteWithLabels&amp;gt; = noteDao.getNoteWithLabels(noteId)&amp;#13;&amp;#10;-&amp;#13;&amp;#10;+    &amp;#13;&amp;#10;     fun getAllNotesWithLabels(): LiveData&amp;lt;List&amp;lt;NoteWithLabels&amp;gt;&amp;gt; = noteDao.getAllNotesWithLabels()&amp;#13;&amp;#10; &amp;#13;&amp;#10;     suspend fun insertNote(note: Note): Long {&amp;#13;&amp;#10;@@ -89,7 +87,8 @@&amp;#10; &amp;#13;&amp;#10;     suspend fun deleteAllLabels() = labelDao.deleteAllLabels()&amp;#13;&amp;#10; &amp;#13;&amp;#10;-    // Note-Label relationship operations&amp;#13;&amp;#10;+    fun getNoteWithLabels(noteId: Long): LiveData&amp;lt;NoteWithLabels&amp;gt; = noteDao.getNoteWithLabels(noteId)&amp;#13;&amp;#10;+&amp;#13;&amp;#10;     suspend fun addLabelToNote(noteId: Long, labelId: Long) {&amp;#13;&amp;#10;         noteDao.insertNoteLabelCrossRef(NoteLabelCrossRef(noteId, labelId))&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;&amp;#10;&amp;#10;--- a/app\build\generated\source\kapt\debug\com\xr\notes\ui\LabelNotesViewModel_HiltModules.java&amp;#10;+++ b/app\build\generated\source\kapt\debug\com\xr\notes\ui\LabelNotesViewModel_HiltModules.java&amp;#10;@@ -1,52 +0,0 @@&amp;#10;-package com.xr.notes.ui;&amp;#10;-&amp;#10;-import androidx.lifecycle.ViewModel;&amp;#10;-import dagger.Binds;&amp;#10;-import dagger.Module;&amp;#10;-import dagger.Provides;&amp;#10;-import dagger.hilt.InstallIn;&amp;#10;-import dagger.hilt.android.components.ActivityRetainedComponent;&amp;#10;-import dagger.hilt.android.components.ViewModelComponent;&amp;#10;-import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;&amp;#10;-import dagger.hilt.codegen.OriginatingElement;&amp;#10;-import dagger.multibindings.IntoMap;&amp;#10;-import dagger.multibindings.IntoSet;&amp;#10;-import dagger.multibindings.StringKey;&amp;#10;-import java.lang.String;&amp;#10;-import javax.annotation.processing.Generated;&amp;#10;-&amp;#10;-@Generated(&amp;quot;dagger.hilt.android.processor.internal.viewmodel.ViewModelProcessor&amp;quot;)&amp;#10;-@OriginatingElement(&amp;#10;-    topLevelClass = LabelNotesViewModel.class&amp;#10;-)&amp;#10;-public final class LabelNotesViewModel_HiltModules {&amp;#10;-  private LabelNotesViewModel_HiltModules() {&amp;#10;-  }&amp;#10;-&amp;#10;-  @Module&amp;#10;-  @InstallIn(ViewModelComponent.class)&amp;#10;-  public abstract static class BindsModule {&amp;#10;-    private BindsModule() {&amp;#10;-    }&amp;#10;-&amp;#10;-    @Binds&amp;#10;-    @IntoMap&amp;#10;-    @StringKey(&amp;quot;com.xr.notes.ui.LabelNotesViewModel&amp;quot;)&amp;#10;-    @HiltViewModelMap&amp;#10;-    public abstract ViewModel binds(LabelNotesViewModel vm);&amp;#10;-  }&amp;#10;-&amp;#10;-  @Module&amp;#10;-  @InstallIn(ActivityRetainedComponent.class)&amp;#10;-  public static final class KeyModule {&amp;#10;-    private KeyModule() {&amp;#10;-    }&amp;#10;-&amp;#10;-    @Provides&amp;#10;-    @IntoSet&amp;#10;-    @HiltViewModelMap.KeySet&amp;#10;-    public static String provide() {&amp;#10;-      return &amp;quot;com.xr.notes.ui.LabelNotesViewModel&amp;quot;;&amp;#10;-    }&amp;#10;-  }&amp;#10;-}&amp;#10;&amp;#10;&amp;#10;--- a/app\build\generated\source\kapt\debug\com\xr\notes\ui\NotesViewModel_HiltModules.java&amp;#10;+++ b/app\build\generated\source\kapt\debug\com\xr\notes\ui\NotesViewModel_HiltModules.java&amp;#10;@@ -1,52 +0,0 @@&amp;#10;-package com.xr.notes.ui;&amp;#10;-&amp;#10;-import androidx.lifecycle.ViewModel;&amp;#10;-import dagger.Binds;&amp;#10;-import dagger.Module;&amp;#10;-import dagger.Provides;&amp;#10;-import dagger.hilt.InstallIn;&amp;#10;-import dagger.hilt.android.components.ActivityRetainedComponent;&amp;#10;-import dagger.hilt.android.components.ViewModelComponent;&amp;#10;-import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;&amp;#10;-import dagger.hilt.codegen.OriginatingElement;&amp;#10;-import dagger.multibindings.IntoMap;&amp;#10;-import dagger.multibindings.IntoSet;&amp;#10;-import dagger.multibindings.StringKey;&amp;#10;-import java.lang.String;&amp;#10;-import javax.annotation.processing.Generated;&amp;#10;-&amp;#10;-@Generated(&amp;quot;dagger.hilt.android.processor.internal.viewmodel.ViewModelProcessor&amp;quot;)&amp;#10;-@OriginatingElement(&amp;#10;-    topLevelClass = NotesViewModel.class&amp;#10;-)&amp;#10;-public final class NotesViewModel_HiltModules {&amp;#10;-  private NotesViewModel_HiltModules() {&amp;#10;-  }&amp;#10;-&amp;#10;-  @Module&amp;#10;-  @InstallIn(ViewModelComponent.class)&amp;#10;-  public abstract static class BindsModule {&amp;#10;-    private BindsModule() {&amp;#10;-    }&amp;#10;-&amp;#10;-    @Binds&amp;#10;-    @IntoMap&amp;#10;-    @StringKey(&amp;quot;com.xr.notes.ui.NotesViewModel&amp;quot;)&amp;#10;-    @HiltViewModelMap&amp;#10;-    public abstract ViewModel binds(NotesViewModel vm);&amp;#10;-  }&amp;#10;-&amp;#10;-  @Module&amp;#10;-  @InstallIn(ActivityRetainedComponent.class)&amp;#10;-  public static final class KeyModule {&amp;#10;-    private KeyModule() {&amp;#10;-    }&amp;#10;-&amp;#10;-    @Provides&amp;#10;-    @IntoSet&amp;#10;-    @HiltViewModelMap.KeySet&amp;#10;-    public static String provide() {&amp;#10;-      return &amp;quot;com.xr.notes.ui.NotesViewModel&amp;quot;;&amp;#10;-    }&amp;#10;-  }&amp;#10;-}&amp;#10;&amp;#10;&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341057469&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341057469&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341059181&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341060371&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;       &lt;/list&gt;&#13;&#10;     &lt;/option&gt;&#13;&#10;   &lt;/component&gt;&#13;&#10;&#10;&#10;--- a/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&#10;+++ b/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&#10;@@ -29,7 +29,7 @@&#10;     fun getNoteById(noteId: Long): LiveData&lt;Note&gt; = noteDao.getNoteById(noteId)&#13;&#10; &#13;&#10;     fun searchNotes(query: String): LiveData&lt;List&lt;Note&gt;&gt; = noteDao.searchNotes(query)&#13;&#10;-    &#13;&#10;+&#13;&#10;     fun getAllNotesWithLabels(): LiveData&lt;List&lt;NoteWithLabels&gt;&gt; = noteDao.getAllNotesWithLabels()&#13;&#10; &#13;&#10;     suspend fun insertNote(note: Note): Long {&#13;&#10;&#10;" />
          <option name="timestamp" value="1743341822010" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\NotesAdapter.kt" />
          <option name="timestamp" value="1743341822010" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="The user made the following edits:&#10;&#10;--- a/app\src\main\java\com\xr\notes\NotesAdapter.kt&#10;+++ b/app\src\main\java\com\xr\notes\NotesAdapter.kt&#10;@@ -38,14 +38,14 @@&#10;         val note = getItem(position)&#13;&#10;         holder.bind(note)&#13;&#10;     }&#13;&#10;-&#13;&#10;+    &#13;&#10;     fun toggleSelectionMode(): Boolean {&#13;&#10;         selectionMode = !selectionMode&#13;&#10;         if (!selectionMode) {&#13;&#10;             selectedNotes.clear()&#13;&#10;             listener.onSelectionChanged(0)&#13;&#10;         }&#13;&#10;-        notifyDataSetChanged()&#13;&#10;+        notifyDataSetChanged() // Make sure this is called&#13;&#10;         return selectionMode&#13;&#10;     }&#13;&#10; &#13;&#10;@@ -102,6 +102,7 @@&#10;                         // Start selection mode and select this note&#13;&#10;                         selectionMode = true&#13;&#10;                         toggleNoteSelection(note)&#13;&#10;+                        notifyDataSetChanged() // Add this line to refresh all views&#13;&#10;                         return@setOnLongClickListener true&#13;&#10;                     } else {&#13;&#10;                         // If already in selection mode, request to delete this note directly&#13;&#10;&#10;&#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&#10;@@ -4,10 +4,6 @@&#10;     &lt;option name=&quot;actions&quot;&gt;&#13;&#10;       &lt;list&gt;&#13;&#10;         &lt;UserActionsMetaData&gt;&#13;&#10;-          &lt;option name=&quot;action&quot; value=&quot;The user made the following edits:&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;#10;@@ -1,7 +1,6 @@&amp;#10;+&amp;#13;&amp;#10; package com.xr.notes.ui&amp;#13;&amp;#10; &amp;#13;&amp;#10;-// File: app/src/main/java/com/example/notesapp/ui/notes/AddEditNoteViewModel.kt&amp;#13;&amp;#10;-&amp;#13;&amp;#10; import androidx.lifecycle.LiveData&amp;#13;&amp;#10; import androidx.lifecycle.MutableLiveData&amp;#13;&amp;#10; import androidx.lifecycle.ViewModel&amp;#13;&amp;#10;@@ -29,6 +28,7 @@&amp;#10;     val labelsWithSelection: LiveData&amp;lt;List&amp;lt;Pair&amp;lt;Label, Boolean&amp;gt;&amp;gt;&amp;gt; = _labelsWithSelection&amp;#13;&amp;#10; &amp;#13;&amp;#10;     private var currentNoteId: Long = -1L&amp;#13;&amp;#10;+    private var isSaving = false // Flag to prevent concurrent save operations&amp;#13;&amp;#10; &amp;#13;&amp;#10;     fun loadNote(noteId: Long) {&amp;#13;&amp;#10;         if (noteId != -1L) {&amp;#13;&amp;#10;@@ -44,32 +44,41 @@&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;     fun saveNote(content: String, isEncrypted: Boolean) {&amp;#13;&amp;#10;+        // Prevent multiple concurrent save operations&amp;#13;&amp;#10;+        if (isSaving) return&amp;#13;&amp;#10;+        isSaving = true&amp;#13;&amp;#10;+&amp;#13;&amp;#10;         viewModelScope.launch {&amp;#13;&amp;#10;-            val currentNote = _note.value&amp;#13;&amp;#10;+            try {&amp;#13;&amp;#10;+                val currentNote = _note.value&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+                if (currentNote != null) {&amp;#13;&amp;#10;+                    // Update existing note&amp;#13;&amp;#10;+                    val updatedNote = currentNote.copy(&amp;#13;&amp;#10;+                        content = content,&amp;#13;&amp;#10;+                        isEncrypted = isEncrypted,&amp;#13;&amp;#10;+                        modifiedAt = Date()&amp;#13;&amp;#10;+                    )&amp;#13;&amp;#10;+                    repository.updateNote(updatedNote)&amp;#13;&amp;#10;+                } else {&amp;#13;&amp;#10;+                    // Create new note&amp;#13;&amp;#10;+                    val newNote = Note(&amp;#13;&amp;#10;+                        content = content,&amp;#13;&amp;#10;+                        isEncrypted = isEncrypted,&amp;#13;&amp;#10;+                        createdAt = Date(),&amp;#13;&amp;#10;+                        modifiedAt = Date()&amp;#13;&amp;#10;+                    )&amp;#13;&amp;#10;+                    currentNoteId = repository.insertNote(newNote)&amp;#13;&amp;#10;+                }&amp;#13;&amp;#10; &amp;#13;&amp;#10;-            if (currentNote != null) {&amp;#13;&amp;#10;-                // Update existing note&amp;#13;&amp;#10;-                val updatedNote = currentNote.copy(&amp;#13;&amp;#10;-                    content = content,&amp;#13;&amp;#10;-                    isEncrypted = isEncrypted,&amp;#13;&amp;#10;-                    modifiedAt = Date()&amp;#13;&amp;#10;-                )&amp;#13;&amp;#10;-                repository.updateNote(updatedNote)&amp;#13;&amp;#10;-            } else {&amp;#13;&amp;#10;-                // Create new note&amp;#13;&amp;#10;-                val newNote = Note(&amp;#13;&amp;#10;-                    content = content,&amp;#13;&amp;#10;-                    isEncrypted = isEncrypted,&amp;#13;&amp;#10;-                    createdAt = Date(),&amp;#13;&amp;#10;-                    modifiedAt = Date()&amp;#13;&amp;#10;-                )&amp;#13;&amp;#10;-                currentNoteId = repository.insertNote(newNote)&amp;#13;&amp;#10;+                _saveComplete.value = true&amp;#13;&amp;#10;+            } finally {&amp;#13;&amp;#10;+                isSaving = false&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-            _saveComplete.value = true&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;+    // Rest of the methods remain unchanged&amp;#13;&amp;#10;     fun getAllLabels() {&amp;#13;&amp;#10;         viewModelScope.launch {&amp;#13;&amp;#10;             val allLabels = repository.getAllLabels().value ?: emptyList()&amp;#13;&amp;#10;@@ -141,4 +150,6 @@&amp;#10;             repository.deleteNote(currentNote)&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+&amp;#13;&amp;#10; }&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesViewModel.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesViewModel.kt&amp;#10;@@ -71,4 +71,12 @@&amp;#10;             }&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    fun deleteNote(note: Note) {&amp;#13;&amp;#10;+        viewModelScope.launch {&amp;#13;&amp;#10;+            repository.deleteNote(note)&amp;#13;&amp;#10;+            // Reload notes after deletion&amp;#13;&amp;#10;+            loadNotesForLabel()&amp;#13;&amp;#10;+        }&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10; }&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;#10;@@ -8,6 +8,7 @@&amp;#10; import android.view.View&amp;#13;&amp;#10; import android.view.ViewGroup&amp;#13;&amp;#10; import android.widget.SearchView&amp;#13;&amp;#10;+import androidx.appcompat.app.AlertDialog&amp;#13;&amp;#10; import androidx.fragment.app.Fragment&amp;#13;&amp;#10; import androidx.fragment.app.viewModels&amp;#13;&amp;#10; import androidx.navigation.fragment.findNavController&amp;#13;&amp;#10;@@ -15,6 +16,7 @@&amp;#10; import androidx.recyclerview.widget.LinearLayoutManager&amp;#13;&amp;#10; import androidx.recyclerview.widget.RecyclerView&amp;#13;&amp;#10; import com.google.android.material.floatingactionbutton.FloatingActionButton&amp;#13;&amp;#10;+import com.google.android.material.snackbar.Snackbar&amp;#13;&amp;#10; import com.xr.notes.NotesAdapter&amp;#13;&amp;#10; import com.xr.notes.R&amp;#13;&amp;#10; import com.xr.notes.models.Note&amp;#13;&amp;#10;@@ -159,4 +161,28 @@&amp;#10;     override fun onSelectionChanged(count: Int) {&amp;#13;&amp;#10;         activity?.invalidateOptionsMenu()&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    override fun onRequestDeleteNote(note: Note) {&amp;#13;&amp;#10;+        // Single note deletion request (from long-press)&amp;#13;&amp;#10;+        confirmDeleteNote(note)&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    private fun confirmDeleteNote(note: Note) {&amp;#13;&amp;#10;+        AlertDialog.Builder(requireContext())&amp;#13;&amp;#10;+            .setTitle(R.string.confirm_delete)&amp;#13;&amp;#10;+            .setMessage(R.string.confirm_delete_message)&amp;#13;&amp;#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&amp;gt;&amp;#13;&amp;#10;+                // Delete the note using the viewModel&amp;#13;&amp;#10;+                viewModel.deleteNote(note)&amp;#13;&amp;#10;+                Snackbar.make(&amp;#13;&amp;#10;+                    requireView(),&amp;#13;&amp;#10;+                    getString(R.string.notes_deleted, 1),&amp;#13;&amp;#10;+                    Snackbar.LENGTH_LONG&amp;#13;&amp;#10;+                ).show()&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;gt;&amp;#13;&amp;#10;+                dialog.cancel()&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            .show()&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10; }&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\NotesViewModel.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\NotesViewModel.kt&amp;#10;@@ -76,9 +76,10 @@&amp;#10; &amp;#13;&amp;#10;     fun deleteNotes(noteIds: List&amp;lt;Long&amp;gt;) {&amp;#13;&amp;#10;         viewModelScope.launch {&amp;#13;&amp;#10;-            noteIds.forEach { noteId -&amp;gt;&amp;#13;&amp;#10;-                val note = repository.getNoteById(noteId).value ?: return@forEach&amp;#13;&amp;#10;-                repository.deleteNote(note)&amp;#13;&amp;#10;+            for (noteId in noteIds) {&amp;#13;&amp;#10;+                repository.getNoteById(noteId).value?.let { note -&amp;gt;&amp;#13;&amp;#10;+                    repository.deleteNote(note)&amp;#13;&amp;#10;+                }&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\NotesFragment.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\NotesFragment.kt&amp;#10;@@ -1,8 +1,5 @@&amp;#10; package com.xr.notes.ui&amp;#13;&amp;#10; &amp;#13;&amp;#10;-// File: app/src/main/java/com/example/notesapp/ui/notes/NotesFragment.kt&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-import com.xr.notes.R&amp;#13;&amp;#10; import android.os.Bundle&amp;#13;&amp;#10; import android.view.LayoutInflater&amp;#13;&amp;#10; import android.view.Menu&amp;#13;&amp;#10;@@ -11,6 +8,7 @@&amp;#10; import android.view.View&amp;#13;&amp;#10; import android.view.ViewGroup&amp;#13;&amp;#10; import android.widget.SearchView&amp;#13;&amp;#10;+import androidx.appcompat.app.AlertDialog&amp;#13;&amp;#10; import androidx.fragment.app.Fragment&amp;#13;&amp;#10; import androidx.fragment.app.viewModels&amp;#13;&amp;#10; import androidx.navigation.fragment.findNavController&amp;#13;&amp;#10;@@ -19,6 +17,7 @@&amp;#10; import com.google.android.material.floatingactionbutton.FloatingActionButton&amp;#13;&amp;#10; import com.google.android.material.snackbar.Snackbar&amp;#13;&amp;#10; import com.xr.notes.NotesAdapter&amp;#13;&amp;#10;+import com.xr.notes.R&amp;#13;&amp;#10; import com.xr.notes.models.Note&amp;#13;&amp;#10; import com.xr.notes.utils.AppPreferenceManager&amp;#13;&amp;#10; import dagger.hilt.android.AndroidEntryPoint&amp;#13;&amp;#10;@@ -67,7 +66,7 @@&amp;#10; &amp;#13;&amp;#10;     private fun setupFab() {&amp;#13;&amp;#10;         fabAddNote.setOnClickListener {&amp;#13;&amp;#10;-            navigateToAddEditNote(null)&amp;#13;&amp;#10;+            navigateToAddEditNote(-1L)&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;@@ -77,6 +76,7 @@&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;+    @Suppress(&amp;quot;DEPRECATION&amp;quot;)&amp;#13;&amp;#10;     override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&amp;#13;&amp;#10;         inflater.inflate(R.menu.menu_notes, menu)&amp;#13;&amp;#10; &amp;#13;&amp;#10;@@ -97,6 +97,16 @@&amp;#10;         super.onCreateOptionsMenu(menu, inflater)&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;+    @Suppress(&amp;quot;DEPRECATION&amp;quot;)&amp;#13;&amp;#10;+    override fun onPrepareOptionsMenu(menu: Menu) {&amp;#13;&amp;#10;+        val inSelectionMode = notesAdapter.isInSelectionMode()&amp;#13;&amp;#10;+        menu.findItem(R.id.action_select_all).isVisible = inSelectionMode&amp;#13;&amp;#10;+        menu.findItem(R.id.action_delete_selected).isVisible = inSelectionMode &amp;amp;&amp;amp; notesAdapter.getSelectedCount() &amp;gt; 0&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+        super.onPrepareOptionsMenu(menu)&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    @Suppress(&amp;quot;DEPRECATION&amp;quot;)&amp;#13;&amp;#10;     override fun onOptionsItemSelected(item: MenuItem): Boolean {&amp;#13;&amp;#10;         return when (item.itemId) {&amp;#13;&amp;#10;             R.id.action_sort_title -&amp;gt; {&amp;#13;&amp;#10;@@ -117,6 +127,7 @@&amp;#10;             }&amp;#13;&amp;#10;             R.id.action_backup -&amp;gt; {&amp;#13;&amp;#10;                 viewModel.createBackup()&amp;#13;&amp;#10;+                Snackbar.make(requireView(), R.string.backup_created_successfully, Snackbar.LENGTH_SHORT).show()&amp;#13;&amp;#10;                 true&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;             R.id.action_restore -&amp;gt; {&amp;#13;&amp;#10;@@ -132,6 +143,7 @@&amp;#10;                     notesAdapter.toggleSelectionMode()&amp;#13;&amp;#10;                 }&amp;#13;&amp;#10;                 notesAdapter.selectAllNotes()&amp;#13;&amp;#10;+                activity?.invalidateOptionsMenu()&amp;#13;&amp;#10;                 true&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;             R.id.action_delete_selected -&amp;gt; {&amp;#13;&amp;#10;@@ -142,29 +154,35 @@&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;-    override fun onPrepareOptionsMenu(menu: Menu) {&amp;#13;&amp;#10;-        val inSelectionMode = notesAdapter.isInSelectionMode()&amp;#13;&amp;#10;-        menu.findItem(R.id.action_select_all).isVisible = inSelectionMode&amp;#13;&amp;#10;-        menu.findItem(R.id.action_delete_selected).isVisible = inSelectionMode &amp;amp;&amp;amp; notesAdapter.getSelectedCount() &amp;gt; 0&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-        super.onPrepareOptionsMenu(menu)&amp;#13;&amp;#10;-    }&amp;#13;&amp;#10;-&amp;#13;&amp;#10;     private fun deleteSelectedNotes() {&amp;#13;&amp;#10;         val selectedIds = notesAdapter.getSelectedNoteIds()&amp;#13;&amp;#10;         if (selectedIds.isNotEmpty()) {&amp;#13;&amp;#10;-            viewModel.deleteNotes(selectedIds)&amp;#13;&amp;#10;-            Snackbar.make(&amp;#13;&amp;#10;-                requireView(),&amp;#13;&amp;#10;-                getString(R.string.notes_deleted, selectedIds.size),&amp;#13;&amp;#10;-                Snackbar.LENGTH_LONG&amp;#13;&amp;#10;-            ).show()&amp;#13;&amp;#10;-            notesAdapter.toggleSelectionMode()&amp;#13;&amp;#10;+            confirmDeleteNotes(selectedIds)&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;+    private fun confirmDeleteNotes(noteIds: List&amp;lt;Long&amp;gt;) {&amp;#13;&amp;#10;+        AlertDialog.Builder(requireContext())&amp;#13;&amp;#10;+            .setTitle(if (noteIds.size &amp;gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&amp;#13;&amp;#10;+            .setMessage(if (noteIds.size &amp;gt; 1) getString(R.string.confirm_delete_message) else getString(R.string.confirm_delete_message))&amp;#13;&amp;#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&amp;gt;&amp;#13;&amp;#10;+                viewModel.deleteNotes(noteIds)&amp;#13;&amp;#10;+                Snackbar.make(&amp;#13;&amp;#10;+                    requireView(),&amp;#13;&amp;#10;+                    getString(R.string.notes_deleted, noteIds.size),&amp;#13;&amp;#10;+                    Snackbar.LENGTH_LONG&amp;#13;&amp;#10;+                ).show()&amp;#13;&amp;#10;+                notesAdapter.toggleSelectionMode()&amp;#13;&amp;#10;+                activity?.invalidateOptionsMenu()&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;gt;&amp;#13;&amp;#10;+                dialog.cancel()&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;+            .show()&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;-    private fun navigateToAddEditNote(noteId: Long?) {&amp;#13;&amp;#10;-        val action = NotesFragmentDirections.actionNotesFragmentToAddEditNoteFragment(noteId ?: -1L)&amp;#13;&amp;#10;+    private fun navigateToAddEditNote(noteId: Long) {&amp;#13;&amp;#10;+        val action = NotesFragmentDirections.actionNotesFragmentToAddEditNoteFragment(noteId)&amp;#13;&amp;#10;         findNavController().navigate(action)&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;@@ -180,4 +198,9 @@&amp;#10;     override fun onSelectionChanged(count: Int) {&amp;#13;&amp;#10;         activity?.invalidateOptionsMenu()&amp;#13;&amp;#10;     }&amp;#13;&amp;#10;+&amp;#13;&amp;#10;+    override fun onRequestDeleteNote(note: Note) {&amp;#13;&amp;#10;+        // Single note deletion request (from long-press)&amp;#13;&amp;#10;+        confirmDeleteNotes(listOf(note.id))&amp;#13;&amp;#10;+    }&amp;#13;&amp;#10; }&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\NotesAdapter.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\NotesAdapter.kt&amp;#10;@@ -1,7 +1,5 @@&amp;#10; package com.xr.notes&amp;#13;&amp;#10; &amp;#13;&amp;#10;-// File: app/src/main/java/com/example/notesapp/adapters/NotesAdapter.kt&amp;#13;&amp;#10;-&amp;#13;&amp;#10; import android.view.LayoutInflater&amp;#13;&amp;#10; import android.view.View&amp;#13;&amp;#10; import android.view.ViewGroup&amp;#13;&amp;#10;@@ -13,7 +11,6 @@&amp;#10; import com.xr.notes.models.Note&amp;#13;&amp;#10; import com.xr.notes.utils.AppPreferenceManager&amp;#13;&amp;#10; import java.text.SimpleDateFormat&amp;#13;&amp;#10;-import java.util.Date&amp;#13;&amp;#10; import java.util.Locale&amp;#13;&amp;#10; &amp;#13;&amp;#10; class NotesAdapter(&amp;#13;&amp;#10;@@ -28,6 +25,7 @@&amp;#10;         fun onNoteClicked(note: Note)&amp;#13;&amp;#10;         fun onNoteSelected(note: Note, isSelected: Boolean)&amp;#13;&amp;#10;         fun onSelectionChanged(count: Int)&amp;#13;&amp;#10;+        fun onRequestDeleteNote(note: Note) // Added method for direct delete&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NoteViewHolder {&amp;#13;&amp;#10;@@ -101,10 +99,15 @@&amp;#10;                 if (position != RecyclerView.NO_POSITION) {&amp;#13;&amp;#10;                     val note = getItem(position)&amp;#13;&amp;#10;                     if (!selectionMode) {&amp;#13;&amp;#10;+                        // Start selection mode and select this note&amp;#13;&amp;#10;                         selectionMode = true&amp;#13;&amp;#10;                         toggleNoteSelection(note)&amp;#13;&amp;#10;+                        return@setOnLongClickListener true&amp;#13;&amp;#10;+                    } else {&amp;#13;&amp;#10;+                        // If already in selection mode, request to delete this note directly&amp;#13;&amp;#10;+                        listener.onRequestDeleteNote(note)&amp;#13;&amp;#10;+                        return@setOnLongClickListener true&amp;#13;&amp;#10;                     }&amp;#13;&amp;#10;-                    return@setOnLongClickListener true&amp;#13;&amp;#10;                 }&amp;#13;&amp;#10;                 return@setOnLongClickListener false&amp;#13;&amp;#10;             }&amp;#13;&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelsFragment.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelsFragment.kt&amp;#10;@@ -144,14 +144,16 @@&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;     override fun onLabelClicked(label: Label) {&amp;#13;&amp;#10;-        TODO(&amp;quot;Not yet implemented&amp;quot;)&amp;#13;&amp;#10;+        // Navigate to notes with this label&amp;#13;&amp;#10;+        val action = LabelsFragmentDirections.actionLabelsFragmentToLabelNotesFragment(label.id, label.name)&amp;#13;&amp;#10;+        findNavController().navigate(action)&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;     override fun onLabelEditClicked(label: Label) {&amp;#13;&amp;#10;-        TODO(&amp;quot;Not yet implemented&amp;quot;)&amp;#13;&amp;#10;+        showEditLabelDialog(label)&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;     override fun onLabelDeleteClicked(label: Label) {&amp;#13;&amp;#10;-        TODO(&amp;quot;Not yet implemented&amp;quot;)&amp;#13;&amp;#10;+        confirmDeleteLabel(label)&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; }&amp;#10;\ No newline at end of file&amp;#10;&amp;#10;&quot; /&gt;&#13;&#10;-          &lt;option name=&quot;timestamp&quot; value=&quot;1743339145412&quot; /&gt;&#13;&#10;-        &lt;/UserActionsMetaData&gt;&#13;&#10;-        &lt;UserActionsMetaData&gt;&#13;&#10;           &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\LabelsFragment.kt&quot; /&gt;&#13;&#10;           &lt;option name=&quot;timestamp&quot; value=&quot;1743339145412&quot; /&gt;&#13;&#10;         &lt;/UserActionsMetaData&gt;&#13;&#10;@@ -99,6 +95,14 @@&#10;           &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&quot; /&gt;&#13;&#10;           &lt;option name=&quot;timestamp&quot; value=&quot;1743341060371&quot; /&gt;&#13;&#10;         &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;The user made the following edits:&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;#10;@@ -2,7 +2,6 @@&amp;#10; &amp;#13;&amp;#10; import androidx.lifecycle.LiveData&amp;#13;&amp;#10; import androidx.lifecycle.MutableLiveData&amp;#13;&amp;#10;-import androidx.lifecycle.Observer&amp;#13;&amp;#10; import androidx.lifecycle.ViewModel&amp;#13;&amp;#10; import androidx.lifecycle.viewModelScope&amp;#13;&amp;#10; import com.xr.notes.models.Label&amp;#13;&amp;#10;@@ -84,32 +83,24 @@&amp;#10; &amp;#13;&amp;#10;     fun getAllLabels() {&amp;#13;&amp;#10;         viewModelScope.launch {&amp;#13;&amp;#10;-            val allLabelsLiveData = repository.getAllLabels()&amp;#13;&amp;#10;+            // Get all labels&amp;#13;&amp;#10;+            val labels = repository.getAllLabels().value ?: emptyList()&amp;#13;&amp;#10; &amp;#13;&amp;#10;-            // Use a one-time observer to get the labels&amp;#13;&amp;#10;-            allLabelsLiveData.observeForever(object : Observer&amp;lt;List&amp;lt;Label&amp;gt;&amp;gt; {&amp;#13;&amp;#10;-                override fun onChanged(labels: List&amp;lt;Label&amp;gt;) {&amp;#13;&amp;#10;-                    allLabelsLiveData.removeObserver(this)&amp;#13;&amp;#10;+            if (currentNoteId != -1L) {&amp;#13;&amp;#10;+                // For existing note, get associated labels&amp;#13;&amp;#10;+                val noteWithLabels = repository.getNoteWithLabels(currentNoteId).value&amp;#13;&amp;#10;+                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;#13;&amp;#10; &amp;#13;&amp;#10;-                    if (currentNoteId != -1L) {&amp;#13;&amp;#10;-                        val noteWithLabelsLiveData = repository.getNoteWithLabels(currentNoteId)&amp;#13;&amp;#10;-                        noteWithLabelsLiveData.observeForever(object : Observer&amp;lt;NoteWithLabels&amp;gt; {&amp;#13;&amp;#10;-                            override fun onChanged(noteWithLabels: NoteWithLabels?) {&amp;#13;&amp;#10;-                                noteWithLabelsLiveData.removeObserver(this)&amp;#13;&amp;#10;-&amp;#13;&amp;#10;-                                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;#13;&amp;#10;-                                _labelsWithSelection.value = labels.map { label -&amp;gt;&amp;#13;&amp;#10;-                                    label to noteLabels.any { it.id == label.id }&amp;#13;&amp;#10;-                                }&amp;#13;&amp;#10;-                            }&amp;#13;&amp;#10;-                        })&amp;#13;&amp;#10;-                    } else {&amp;#13;&amp;#10;-                        _labelsWithSelection.value = labels.map { label -&amp;gt;&amp;#13;&amp;#10;-                            label to false&amp;#13;&amp;#10;-                        }&amp;#13;&amp;#10;-                    }&amp;#13;&amp;#10;+                // Create pairs of (label, isSelected)&amp;#13;&amp;#10;+                _labelsWithSelection.value = labels.map { label -&amp;gt;&amp;#13;&amp;#10;+                    label to noteLabels.any { it.id == label.id }&amp;#13;&amp;#10;+                }&amp;#13;&amp;#10;+            } else {&amp;#13;&amp;#10;+                // For a new note, all labels are unselected&amp;#13;&amp;#10;+                _labelsWithSelection.value = labels.map { label -&amp;gt;&amp;#13;&amp;#10;+                    label to false&amp;#13;&amp;#10;                 }&amp;#13;&amp;#10;-            })&amp;#13;&amp;#10;+            }&amp;#13;&amp;#10;         }&amp;#13;&amp;#10;     }&amp;#13;&amp;#10; &amp;#13;&amp;#10;&amp;#10;&amp;#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&amp;#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&amp;#10;@@ -75,6 +75,30 @@&amp;#10;           &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;           &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743340930962&amp;quot; /&amp;gt;&amp;#13;&amp;#10;         &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;The user made the following edits:&amp;amp;#10;&amp;amp;#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&amp;amp;#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&amp;amp;#10;@@ -63,6 +63,18 @@&amp;amp;#10;           &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;           &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743340894139&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;         &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;The user made the following edits:&amp;amp;amp;#10;&amp;amp;amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;amp;#10;@@ -1,14 +1,16 @@&amp;amp;amp;#10;-&amp;amp;amp;#13;&amp;amp;amp;#10; package com.xr.notes.ui&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10; import androidx.lifecycle.LiveData&amp;amp;amp;#13;&amp;amp;amp;#10; import androidx.lifecycle.MutableLiveData&amp;amp;amp;#13;&amp;amp;amp;#10;+import androidx.lifecycle.Observer&amp;amp;amp;#13;&amp;amp;amp;#10; import androidx.lifecycle.ViewModel&amp;amp;amp;#13;&amp;amp;amp;#10; import androidx.lifecycle.viewModelScope&amp;amp;amp;#13;&amp;amp;amp;#10; import com.xr.notes.models.Label&amp;amp;amp;#13;&amp;amp;amp;#10; import com.xr.notes.models.Note&amp;amp;amp;#13;&amp;amp;amp;#10;+import com.xr.notes.models.NoteWithLabels&amp;amp;amp;#13;&amp;amp;amp;#10; import com.xr.notes.repo.NotesRepository&amp;amp;amp;#13;&amp;amp;amp;#10; import dagger.hilt.android.lifecycle.HiltViewModel&amp;amp;amp;#13;&amp;amp;amp;#10;+import kotlinx.coroutines.Job&amp;amp;amp;#13;&amp;amp;amp;#10; import kotlinx.coroutines.launch&amp;amp;amp;#13;&amp;amp;amp;#10; import java.util.Date&amp;amp;amp;#13;&amp;amp;amp;#10; import javax.inject.Inject&amp;amp;amp;#13;&amp;amp;amp;#10;@@ -43,12 +45,14 @@&amp;amp;amp;#10;         }&amp;amp;amp;#13;&amp;amp;amp;#10;     }&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;-    fun saveNote(content: String, isEncrypted: Boolean) {&amp;amp;amp;#13;&amp;amp;amp;#10;+    fun hasNoteBeenSaved(): Boolean = currentNoteId != -1L&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+    fun saveNote(content: String, isEncrypted: Boolean): Job {&amp;amp;amp;#13;&amp;amp;amp;#10;         // Prevent multiple concurrent save operations&amp;amp;amp;#13;&amp;amp;amp;#10;-        if (isSaving) return&amp;amp;amp;#13;&amp;amp;amp;#10;+        if (isSaving) return viewModelScope.launch {}&amp;amp;amp;#13;&amp;amp;amp;#10;         isSaving = true&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;-        viewModelScope.launch {&amp;amp;amp;#13;&amp;amp;amp;#10;+        return viewModelScope.launch {&amp;amp;amp;#13;&amp;amp;amp;#10;             try {&amp;amp;amp;#13;&amp;amp;amp;#10;                 val currentNote = _note.value&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;@@ -78,23 +82,34 @@&amp;amp;amp;#10;         }&amp;amp;amp;#13;&amp;amp;amp;#10;     }&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;-    // Rest of the methods remain unchanged&amp;amp;amp;#13;&amp;amp;amp;#10;     fun getAllLabels() {&amp;amp;amp;#13;&amp;amp;amp;#10;         viewModelScope.launch {&amp;amp;amp;#13;&amp;amp;amp;#10;-            val allLabels = repository.getAllLabels().value ?: emptyList()&amp;amp;amp;#13;&amp;amp;amp;#10;+            val allLabelsLiveData = repository.getAllLabels()&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;-            if (currentNoteId != -1L) {&amp;amp;amp;#13;&amp;amp;amp;#10;-                val noteWithLabels = repository.getNoteWithLabels(currentNoteId).value&amp;amp;amp;#13;&amp;amp;amp;#10;-                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;amp;amp;#13;&amp;amp;amp;#10;+            // Use a one-time observer to get the labels&amp;amp;amp;#13;&amp;amp;amp;#10;+            allLabelsLiveData.observeForever(object : Observer&amp;amp;amp;lt;List&amp;amp;amp;lt;Label&amp;amp;amp;gt;&amp;amp;amp;gt; {&amp;amp;amp;#13;&amp;amp;amp;#10;+                override fun onChanged(labels: List&amp;amp;amp;lt;Label&amp;amp;amp;gt;) {&amp;amp;amp;#13;&amp;amp;amp;#10;+                    allLabelsLiveData.removeObserver(this)&amp;amp;amp;#13;&amp;amp;amp;#10;+&amp;amp;amp;#13;&amp;amp;amp;#10;+                    if (currentNoteId != -1L) {&amp;amp;amp;#13;&amp;amp;amp;#10;+                        val noteWithLabelsLiveData = repository.getNoteWithLabels(currentNoteId)&amp;amp;amp;#13;&amp;amp;amp;#10;+                        noteWithLabelsLiveData.observeForever(object : Observer&amp;amp;amp;lt;NoteWithLabels&amp;amp;amp;gt; {&amp;amp;amp;#13;&amp;amp;amp;#10;+                            override fun onChanged(noteWithLabels: NoteWithLabels?) {&amp;amp;amp;#13;&amp;amp;amp;#10;+                                noteWithLabelsLiveData.removeObserver(this)&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;-                _labelsWithSelection.value = allLabels.map { label -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;-                    label to noteLabels.any { it.id == label.id }&amp;amp;amp;#13;&amp;amp;amp;#10;-                }&amp;amp;amp;#13;&amp;amp;amp;#10;-            } else {&amp;amp;amp;#13;&amp;amp;amp;#10;-                _labelsWithSelection.value = allLabels.map { label -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;-                    label to false&amp;amp;amp;#13;&amp;amp;amp;#10;+                                val noteLabels = noteWithLabels?.labels ?: emptyList()&amp;amp;amp;#13;&amp;amp;amp;#10;+                                _labelsWithSelection.value = labels.map { label -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+                                    label to noteLabels.any { it.id == label.id }&amp;amp;amp;#13;&amp;amp;amp;#10;+                                }&amp;amp;amp;#13;&amp;amp;amp;#10;+                            }&amp;amp;amp;#13;&amp;amp;amp;#10;+                        })&amp;amp;amp;#13;&amp;amp;amp;#10;+                    } else {&amp;amp;amp;#13;&amp;amp;amp;#10;+                        _labelsWithSelection.value = labels.map { label -&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+                            label to false&amp;amp;amp;#13;&amp;amp;amp;#10;+                        }&amp;amp;amp;#13;&amp;amp;amp;#10;+                    }&amp;amp;amp;#13;&amp;amp;amp;#10;                 }&amp;amp;amp;#13;&amp;amp;amp;#10;-            }&amp;amp;amp;#13;&amp;amp;amp;#10;+            })&amp;amp;amp;#13;&amp;amp;amp;#10;         }&amp;amp;amp;#13;&amp;amp;amp;#10;     }&amp;amp;amp;#13;&amp;amp;amp;#10; &amp;amp;amp;#13;&amp;amp;amp;#10;@@ -150,6 +165,4 @@&amp;amp;amp;#10;             repository.deleteNote(currentNote)&amp;amp;amp;#13;&amp;amp;amp;#10;         }&amp;amp;amp;#13;&amp;amp;amp;#10;     }&amp;amp;amp;#13;&amp;amp;amp;#10;-&amp;amp;amp;#13;&amp;amp;amp;#10;-&amp;amp;amp;#13;&amp;amp;amp;#10; }&amp;amp;amp;#10;\ No newline at end of file&amp;amp;amp;#10;&amp;amp;amp;#10;&amp;amp;amp;#10;--- a/.idea\UnifiedUserActionsTrackerManager.xml&amp;amp;amp;#10;+++ b/.idea\UnifiedUserActionsTrackerManager.xml&amp;amp;amp;#10;@@ -55,6 +55,14 @@&amp;amp;amp;#10;           &amp;amp;amp;lt;option name=&amp;amp;amp;quot;action&amp;amp;amp;quot; value=&amp;amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;amp;quot; /&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;           &amp;amp;amp;lt;option name=&amp;amp;amp;quot;timestamp&amp;amp;amp;quot; value=&amp;amp;amp;quot;1743339650774&amp;amp;amp;quot; /&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;         &amp;amp;amp;lt;/UserActionsMetaData&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+        &amp;amp;amp;lt;UserActionsMetaData&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+          &amp;amp;amp;lt;option name=&amp;amp;amp;quot;action&amp;amp;amp;quot; value=&amp;amp;amp;quot;The user made the following edits:&amp;amp;amp;amp;#10;&amp;amp;amp;amp;#10;--- a/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\LabelNotesFragment.kt&amp;amp;amp;amp;#10;@@ -123,6 +123,15 @@&amp;amp;amp;amp;#10;     }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10; &amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;     @Suppress(&amp;amp;amp;amp;quot;DEPRECATION&amp;amp;amp;amp;quot;)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    override fun onPrepareOptionsMenu(menu: Menu) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        val inSelectionMode = notesAdapter.isInSelectionMode()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        menu.findItem(R.id.action_select_all)?.isVisible = inSelectionMode&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        menu.findItem(R.id.action_delete_selected)?.isVisible = inSelectionMode &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; notesAdapter.getSelectedCount() &amp;amp;amp;amp;gt; 0&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        super.onPrepareOptionsMenu(menu)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    @Suppress(&amp;amp;amp;amp;quot;DEPRECATION&amp;amp;amp;amp;quot;)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;     override fun onOptionsItemSelected(item: MenuItem): Boolean {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;         return when (item.itemId) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             R.id.action_sort_title -&amp;amp;amp;amp;gt; {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;@@ -137,10 +146,57 @@&amp;amp;amp;amp;#10;                 viewModel.setSortOrder(AppPreferenceManager.SORT_DATE_MODIFIED_DESC)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;                 true&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            R.id.action_select_all -&amp;amp;amp;amp;gt; {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                if (!notesAdapter.isInSelectionMode()) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                notesAdapter.selectAllNotes()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                activity?.invalidateOptionsMenu()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                true&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            R.id.action_delete_selected -&amp;amp;amp;amp;gt; {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                deleteSelectedNotes()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                true&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             else -&amp;amp;amp;amp;gt; super.onOptionsItemSelected(item)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;         }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;     }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10; &amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    private fun deleteSelectedNotes() {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        val selectedIds = notesAdapter.getSelectedNoteIds()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        if (selectedIds.isNotEmpty()) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            confirmDeleteNotes(selectedIds)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    private fun confirmDeleteNotes(noteIds: List&amp;amp;amp;amp;lt;Long&amp;amp;amp;amp;gt;) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+        AlertDialog.Builder(requireContext())&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            .setTitle(if (noteIds.size &amp;amp;amp;amp;gt; 1) getString(R.string.confirm_delete, noteIds.size) else getString(R.string.confirm_delete))&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            .setMessage(getString(R.string.confirm_delete_message))&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            .setPositiveButton(R.string.action_delete) { _, _ -&amp;amp;amp;amp;gt;&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                // Delete notes through the ViewModel&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                viewModel.deleteNotes(noteIds)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                // Show confirmation&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                Snackbar.make(&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                    requireView(),&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                    getString(R.string.notes_deleted, noteIds.size),&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                    Snackbar.LENGTH_SHORT&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                ).show()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                // Exit selection mode&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                if (notesAdapter.isInSelectionMode()) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                    notesAdapter.toggleSelectionMode()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                activity?.invalidateOptionsMenu()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;amp;amp;amp;gt;&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                dialog.cancel()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+            .show()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+    }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;     private fun navigateToAddEditNote(noteId: Long?) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;         // Create a bundle manually until SafeArgs generation is fixed&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;         val bundle = Bundle().apply {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;@@ -164,20 +220,18 @@&amp;amp;amp;amp;#10; &amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;     override fun onRequestDeleteNote(note: Note) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;         // Single note deletion request (from long-press)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;-        confirmDeleteNote(note)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;-    }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;-&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;-    private fun confirmDeleteNote(note: Note) {&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;         AlertDialog.Builder(requireContext())&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             .setTitle(R.string.confirm_delete)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             .setMessage(R.string.confirm_delete_message)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             .setPositiveButton(R.string.action_delete) { _, _ -&amp;amp;amp;amp;gt;&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;-                // Delete the note using the viewModel&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                // Delete the note using the direct delete method&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;                 viewModel.deleteNote(note)&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                // Show confirmation&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;                 Snackbar.make(&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;                     requireView(),&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;                     getString(R.string.notes_deleted, 1),&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;-                    Snackbar.LENGTH_LONG&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;+                    Snackbar.LENGTH_SHORT&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;                 ).show()&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             }&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;             .setNegativeButton(R.string.action_cancel) { dialog, _ -&amp;amp;amp;amp;gt;&amp;amp;amp;amp;#13;&amp;amp;amp;amp;#10;&amp;amp;amp;amp;#10;&amp;amp;amp;quot; /&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+          &amp;amp;amp;lt;option name=&amp;amp;amp;quot;timestamp&amp;amp;amp;quot; value=&amp;amp;amp;quot;1743340894139&amp;amp;amp;quot; /&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+        &amp;amp;amp;lt;/UserActionsMetaData&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+        &amp;amp;amp;lt;UserActionsMetaData&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+          &amp;amp;amp;lt;option name=&amp;amp;amp;quot;action&amp;amp;amp;quot; value=&amp;amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;amp;quot; /&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+          &amp;amp;amp;lt;option name=&amp;amp;amp;quot;timestamp&amp;amp;amp;quot; value=&amp;amp;amp;quot;1743340894139&amp;amp;amp;quot; /&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;+        &amp;amp;amp;lt;/UserActionsMetaData&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;       &amp;amp;amp;lt;/list&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;     &amp;amp;amp;lt;/option&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;   &amp;amp;amp;lt;/component&amp;amp;amp;gt;&amp;amp;amp;#13;&amp;amp;amp;#10;&amp;amp;amp;#10;&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743340927816&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743340927816&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;action&amp;amp;quot; value=&amp;amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+          &amp;amp;lt;option name=&amp;amp;quot;timestamp&amp;amp;quot; value=&amp;amp;quot;1743340930962&amp;amp;quot; /&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+        &amp;amp;lt;/UserActionsMetaData&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;       &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;     &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;   &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;--- a/app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;amp;#10;@@ -1,7 +1,7 @@&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10; package com.xr.notes.ui&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10; import android.os.Bundle&amp;amp;#13;&amp;amp;#10;+import android.util.Log&amp;amp;#13;&amp;amp;#10; import android.view.LayoutInflater&amp;amp;#13;&amp;amp;#10; import android.view.Menu&amp;amp;#13;&amp;amp;#10; import android.view.MenuInflater&amp;amp;#13;&amp;amp;#10;@@ -153,14 +153,64 @@&amp;amp;#10;         }&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-    // Rest of the functions remain unchanged&amp;amp;#13;&amp;amp;#10;     private fun showLabelsDialog() {&amp;amp;#13;&amp;amp;#10;-        viewModel.getAllLabels()&amp;amp;#13;&amp;amp;#10;+        // Clear previous observers to avoid duplicates&amp;amp;#13;&amp;amp;#10;+        viewModel.labelsWithSelection.removeObservers(viewLifecycleOwner)&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+        // If this is a new note that hasn't been saved yet&amp;amp;#13;&amp;amp;#10;+        if (args.noteId == -1L &amp;amp;amp;&amp;amp;amp; !viewModel.hasNoteBeenSaved()) {&amp;amp;#13;&amp;amp;#10;+            // First save the note&amp;amp;#13;&amp;amp;#10;+            val content = editTextNote.text.toString().trim()&amp;amp;#13;&amp;amp;#10;+            if (content.isEmpty()) {&amp;amp;#13;&amp;amp;#10;+                Snackbar.make(requireView(), R.string.error_empty_note, Snackbar.LENGTH_SHORT).show()&amp;amp;#13;&amp;amp;#10;+                return&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+            // Show a loading indicator&amp;amp;#13;&amp;amp;#10;+            val loadingDialog = AlertDialog.Builder(requireContext())&amp;amp;#13;&amp;amp;#10;+                .setMessage(&amp;amp;quot;Saving note...&amp;amp;quot;)&amp;amp;#13;&amp;amp;#10;+                .setCancelable(false)&amp;amp;#13;&amp;amp;#10;+                .create()&amp;amp;#13;&amp;amp;#10;+            loadingDialog.show()&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;+            // Save the note first, then show the labels dialog&amp;amp;#13;&amp;amp;#10;+            viewModel.saveNote(content, isEncrypted).invokeOnCompletion {&amp;amp;#13;&amp;amp;#10;+                requireActivity().runOnUiThread {&amp;amp;#13;&amp;amp;#10;+                    loadingDialog.dismiss()&amp;amp;#13;&amp;amp;#10;+                    // Now that the note is saved, get the labels&amp;amp;#13;&amp;amp;#10;+                    viewModel.getAllLabels()&amp;amp;#13;&amp;amp;#10;+                }&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+        } else {&amp;amp;#13;&amp;amp;#10;+            // Existing note, just get the labels&amp;amp;#13;&amp;amp;#10;+            viewModel.getAllLabels()&amp;amp;#13;&amp;amp;#10;+        }&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;         viewModel.labelsWithSelection.observe(viewLifecycleOwner) { labelsWithSelection -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+            if (labelsWithSelection.isEmpty()) {&amp;amp;#13;&amp;amp;#10;+                // Show a message if no labels are available&amp;amp;#13;&amp;amp;#10;+                AlertDialog.Builder(requireContext())&amp;amp;#13;&amp;amp;#10;+                    .setTitle(R.string.select_labels)&amp;amp;#13;&amp;amp;#10;+                    .setMessage(&amp;amp;quot;No labels available. Create a label first.&amp;amp;quot;)&amp;amp;#13;&amp;amp;#10;+                    .setPositiveButton(R.string.action_done) { dialog, _ -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+                        dialog.dismiss()&amp;amp;#13;&amp;amp;#10;+                    }&amp;amp;#13;&amp;amp;#10;+                    .setNeutralButton(R.string.action_new_label) { _, _ -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;+                        showNewLabelDialog()&amp;amp;#13;&amp;amp;#10;+                    }&amp;amp;#13;&amp;amp;#10;+                    .show()&amp;amp;#13;&amp;amp;#10;+                return@observe&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;             val labelNames = labelsWithSelection.map { it.first.name }.toTypedArray()&amp;amp;#13;&amp;amp;#10;             val checkedItems = labelsWithSelection.map { it.second }.toBooleanArray()&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;+            // Log for debugging&amp;amp;#13;&amp;amp;#10;+            Log.d(&amp;amp;quot;LabelsDialog&amp;amp;quot;, &amp;amp;quot;Label count: ${labelNames.size}&amp;amp;quot;)&amp;amp;#13;&amp;amp;#10;+            for (i in labelNames.indices) {&amp;amp;#13;&amp;amp;#10;+                Log.d(&amp;amp;quot;LabelsDialog&amp;amp;quot;, &amp;amp;quot;Label: ${labelNames[i]}, Checked: ${checkedItems[i]}&amp;amp;quot;)&amp;amp;#13;&amp;amp;#10;+            }&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;             MaterialAlertDialogBuilder(requireContext())&amp;amp;#13;&amp;amp;#10;                 .setTitle(R.string.select_labels)&amp;amp;#13;&amp;amp;#10;                 .setMultiChoiceItems(labelNames, checkedItems) { _, position, isChecked -&amp;amp;gt;&amp;amp;#13;&amp;amp;#10;@@ -272,4 +322,4 @@&amp;amp;#10;             }&amp;amp;#13;&amp;amp;#10;             .show()&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10;-}&amp;amp;#13;&amp;amp;#10;+}&amp;amp;#10;\ No newline at end of file&amp;amp;#10;&amp;amp;#10;&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743341027978&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743341027978&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;The user made the following edits:&amp;amp;#10;&amp;amp;#10;--- a/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;amp;#10;+++ b/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;amp;#10;@@ -29,9 +29,7 @@&amp;amp;#10;     fun getNoteById(noteId: Long): LiveData&amp;amp;lt;Note&amp;amp;gt; = noteDao.getNoteById(noteId)&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;     fun searchNotes(query: String): LiveData&amp;amp;lt;List&amp;amp;lt;Note&amp;amp;gt;&amp;amp;gt; = noteDao.searchNotes(query)&amp;amp;#13;&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10;-    fun getNoteWithLabels(noteId: Long): LiveData&amp;amp;lt;NoteWithLabels&amp;amp;gt; = noteDao.getNoteWithLabels(noteId)&amp;amp;#13;&amp;amp;#10;-&amp;amp;#13;&amp;amp;#10;+    &amp;amp;#13;&amp;amp;#10;     fun getAllNotesWithLabels(): LiveData&amp;amp;lt;List&amp;amp;lt;NoteWithLabels&amp;amp;gt;&amp;amp;gt; = noteDao.getAllNotesWithLabels()&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;     suspend fun insertNote(note: Note): Long {&amp;amp;#13;&amp;amp;#10;@@ -89,7 +87,8 @@&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;     suspend fun deleteAllLabels() = labelDao.deleteAllLabels()&amp;amp;#13;&amp;amp;#10; &amp;amp;#13;&amp;amp;#10;-    // Note-Label relationship operations&amp;amp;#13;&amp;amp;#10;+    fun getNoteWithLabels(noteId: Long): LiveData&amp;amp;lt;NoteWithLabels&amp;amp;gt; = noteDao.getNoteWithLabels(noteId)&amp;amp;#13;&amp;amp;#10;+&amp;amp;#13;&amp;amp;#10;     suspend fun addLabelToNote(noteId: Long, labelId: Long) {&amp;amp;#13;&amp;amp;#10;         noteDao.insertNoteLabelCrossRef(NoteLabelCrossRef(noteId, labelId))&amp;amp;#13;&amp;amp;#10;     }&amp;amp;#13;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;--- a/app\build\generated\source\kapt\debug\com\xr\notes\ui\LabelNotesViewModel_HiltModules.java&amp;amp;#10;+++ b/app\build\generated\source\kapt\debug\com\xr\notes\ui\LabelNotesViewModel_HiltModules.java&amp;amp;#10;@@ -1,52 +0,0 @@&amp;amp;#10;-package com.xr.notes.ui;&amp;amp;#10;-&amp;amp;#10;-import androidx.lifecycle.ViewModel;&amp;amp;#10;-import dagger.Binds;&amp;amp;#10;-import dagger.Module;&amp;amp;#10;-import dagger.Provides;&amp;amp;#10;-import dagger.hilt.InstallIn;&amp;amp;#10;-import dagger.hilt.android.components.ActivityRetainedComponent;&amp;amp;#10;-import dagger.hilt.android.components.ViewModelComponent;&amp;amp;#10;-import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;&amp;amp;#10;-import dagger.hilt.codegen.OriginatingElement;&amp;amp;#10;-import dagger.multibindings.IntoMap;&amp;amp;#10;-import dagger.multibindings.IntoSet;&amp;amp;#10;-import dagger.multibindings.StringKey;&amp;amp;#10;-import java.lang.String;&amp;amp;#10;-import javax.annotation.processing.Generated;&amp;amp;#10;-&amp;amp;#10;-@Generated(&amp;amp;quot;dagger.hilt.android.processor.internal.viewmodel.ViewModelProcessor&amp;amp;quot;)&amp;amp;#10;-@OriginatingElement(&amp;amp;#10;-    topLevelClass = LabelNotesViewModel.class&amp;amp;#10;-)&amp;amp;#10;-public final class LabelNotesViewModel_HiltModules {&amp;amp;#10;-  private LabelNotesViewModel_HiltModules() {&amp;amp;#10;-  }&amp;amp;#10;-&amp;amp;#10;-  @Module&amp;amp;#10;-  @InstallIn(ViewModelComponent.class)&amp;amp;#10;-  public abstract static class BindsModule {&amp;amp;#10;-    private BindsModule() {&amp;amp;#10;-    }&amp;amp;#10;-&amp;amp;#10;-    @Binds&amp;amp;#10;-    @IntoMap&amp;amp;#10;-    @StringKey(&amp;amp;quot;com.xr.notes.ui.LabelNotesViewModel&amp;amp;quot;)&amp;amp;#10;-    @HiltViewModelMap&amp;amp;#10;-    public abstract ViewModel binds(LabelNotesViewModel vm);&amp;amp;#10;-  }&amp;amp;#10;-&amp;amp;#10;-  @Module&amp;amp;#10;-  @InstallIn(ActivityRetainedComponent.class)&amp;amp;#10;-  public static final class KeyModule {&amp;amp;#10;-    private KeyModule() {&amp;amp;#10;-    }&amp;amp;#10;-&amp;amp;#10;-    @Provides&amp;amp;#10;-    @IntoSet&amp;amp;#10;-    @HiltViewModelMap.KeySet&amp;amp;#10;-    public static String provide() {&amp;amp;#10;-      return &amp;amp;quot;com.xr.notes.ui.LabelNotesViewModel&amp;amp;quot;;&amp;amp;#10;-    }&amp;amp;#10;-  }&amp;amp;#10;-}&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;--- a/app\build\generated\source\kapt\debug\com\xr\notes\ui\NotesViewModel_HiltModules.java&amp;amp;#10;+++ b/app\build\generated\source\kapt\debug\com\xr\notes\ui\NotesViewModel_HiltModules.java&amp;amp;#10;@@ -1,52 +0,0 @@&amp;amp;#10;-package com.xr.notes.ui;&amp;amp;#10;-&amp;amp;#10;-import androidx.lifecycle.ViewModel;&amp;amp;#10;-import dagger.Binds;&amp;amp;#10;-import dagger.Module;&amp;amp;#10;-import dagger.Provides;&amp;amp;#10;-import dagger.hilt.InstallIn;&amp;amp;#10;-import dagger.hilt.android.components.ActivityRetainedComponent;&amp;amp;#10;-import dagger.hilt.android.components.ViewModelComponent;&amp;amp;#10;-import dagger.hilt.android.internal.lifecycle.HiltViewModelMap;&amp;amp;#10;-import dagger.hilt.codegen.OriginatingElement;&amp;amp;#10;-import dagger.multibindings.IntoMap;&amp;amp;#10;-import dagger.multibindings.IntoSet;&amp;amp;#10;-import dagger.multibindings.StringKey;&amp;amp;#10;-import java.lang.String;&amp;amp;#10;-import javax.annotation.processing.Generated;&amp;amp;#10;-&amp;amp;#10;-@Generated(&amp;amp;quot;dagger.hilt.android.processor.internal.viewmodel.ViewModelProcessor&amp;amp;quot;)&amp;amp;#10;-@OriginatingElement(&amp;amp;#10;-    topLevelClass = NotesViewModel.class&amp;amp;#10;-)&amp;amp;#10;-public final class NotesViewModel_HiltModules {&amp;amp;#10;-  private NotesViewModel_HiltModules() {&amp;amp;#10;-  }&amp;amp;#10;-&amp;amp;#10;-  @Module&amp;amp;#10;-  @InstallIn(ViewModelComponent.class)&amp;amp;#10;-  public abstract static class BindsModule {&amp;amp;#10;-    private BindsModule() {&amp;amp;#10;-    }&amp;amp;#10;-&amp;amp;#10;-    @Binds&amp;amp;#10;-    @IntoMap&amp;amp;#10;-    @StringKey(&amp;amp;quot;com.xr.notes.ui.NotesViewModel&amp;amp;quot;)&amp;amp;#10;-    @HiltViewModelMap&amp;amp;#10;-    public abstract ViewModel binds(NotesViewModel vm);&amp;amp;#10;-  }&amp;amp;#10;-&amp;amp;#10;-  @Module&amp;amp;#10;-  @InstallIn(ActivityRetainedComponent.class)&amp;amp;#10;-  public static final class KeyModule {&amp;amp;#10;-    private KeyModule() {&amp;amp;#10;-    }&amp;amp;#10;-&amp;amp;#10;-    @Provides&amp;amp;#10;-    @IntoSet&amp;amp;#10;-    @HiltViewModelMap.KeySet&amp;amp;#10;-    public static String provide() {&amp;amp;#10;-      return &amp;amp;quot;com.xr.notes.ui.NotesViewModel&amp;amp;quot;;&amp;amp;#10;-    }&amp;amp;#10;-  }&amp;amp;#10;-}&amp;amp;#10;&amp;amp;#10;&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743341057469&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743341057469&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteFragment.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743341059181&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;action&amp;quot; value=&amp;quot;Visited app\src\main\java\com\xr\notes\ui\AddEditNoteViewModel.kt&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+          &amp;lt;option name=&amp;quot;timestamp&amp;quot; value=&amp;quot;1743341060371&amp;quot; /&amp;gt;&amp;#13;&amp;#10;+        &amp;lt;/UserActionsMetaData&amp;gt;&amp;#13;&amp;#10;       &amp;lt;/list&amp;gt;&amp;#13;&amp;#10;     &amp;lt;/option&amp;gt;&amp;#13;&amp;#10;   &amp;lt;/component&amp;gt;&amp;#13;&amp;#10;&amp;#10;&amp;#10;--- a/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;#10;+++ b/app\src\main\java\com\xr\notes\repo\NotesRepo.kt&amp;#10;@@ -29,7 +29,7 @@&amp;#10;     fun getNoteById(noteId: Long): LiveData&amp;lt;Note&amp;gt; = noteDao.getNoteById(noteId)&amp;#13;&amp;#10; &amp;#13;&amp;#10;     fun searchNotes(query: String): LiveData&amp;lt;List&amp;lt;Note&amp;gt;&amp;gt; = noteDao.searchNotes(query)&amp;#13;&amp;#10;-    &amp;#13;&amp;#10;+&amp;#13;&amp;#10;     fun getAllNotesWithLabels(): LiveData&amp;lt;List&amp;lt;NoteWithLabels&amp;gt;&amp;gt; = noteDao.getAllNotesWithLabels()&amp;#13;&amp;#10; &amp;#13;&amp;#10;     suspend fun insertNote(note: Note): Long {&amp;#13;&amp;#10;&amp;#10;&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341822010&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;+        &lt;UserActionsMetaData&gt;&#13;&#10;+          &lt;option name=&quot;action&quot; value=&quot;Visited app\src\main\java\com\xr\notes\NotesAdapter.kt&quot; /&gt;&#13;&#10;+          &lt;option name=&quot;timestamp&quot; value=&quot;1743341822010&quot; /&gt;&#13;&#10;+        &lt;/UserActionsMetaData&gt;&#13;&#10;       &lt;/list&gt;&#13;&#10;     &lt;/option&gt;&#13;&#10;   &lt;/component&gt;&#13;&#10;&#10;" />
          <option name="timestamp" value="1743341887475" />
        </UserActionsMetaData>
        <UserActionsMetaData>
          <option name="action" value="Visited app\src\main\java\com\xr\notes\ui\NotesFragment.kt" />
          <option name="timestamp" value="1743341887475" />
        </UserActionsMetaData>
      </list>
    </option>
  </component>
</project>